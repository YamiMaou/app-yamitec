{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { getInvoices } from \"../../providers/api\";\nimport { stringToaddDate, formatToBRL } from \"../../providers/commonMethods\";\nimport { setDialog } from \"../../actions/invoiceAction\";\nimport FullScreenInvoiceDialog from \"../../components/Layout/Dialogs/FullScreenInvoiceDialog\";\nimport ListLoading from \"../../components/Loading/ListLoading\";\nimport { DataGrid, RowsProp, ColDef } from '@material-ui/data-grid';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Slide from '@material-ui/core/Slide';\n\nvar Invoices = function (_Component) {\n  _inherits(Invoices, _Component);\n\n  var _super = _createSuper(Invoices);\n\n  function Invoices() {\n    var _this;\n\n    _classCallCheck(this, Invoices);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      invoices: undefined,\n      item: undefined,\n      dialog: false\n    };\n    _this.Transition = React.forwardRef(function Transition(props, ref) {\n      return React.createElement(Slide, _extends({\n        direction: \"up\",\n        ref: ref\n      }, props));\n    });\n    return _this;\n  }\n\n  _createClass(Invoices, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var response;\n      return _regeneratorRuntime.async(function componentDidMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(getInvoices());\n\n            case 2:\n              response = _context.sent;\n              this.setState(_objectSpread(_objectSpread({}, this.state), {}, {\n                invoices: response\n              }));\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"dialogHandler\",\n    value: function dialogHandler(item) {\n      this.props.setDialog(true);\n      this.setState(_objectSpread(_objectSpread({}, this.state), {}, {\n        item: item\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          invoices = _this$state.invoices,\n          item = _this$state.item;\n      var columns = [{\n        id: 'title',\n        label: 'Titulo'\n      }, {\n        id: 'status',\n        label: 'Situação',\n        minWidth: 170,\n        align: 'right',\n        format: function format(value) {\n          var status = [\"Em Aberto\", \"Pendente\", \"Processando\", \"Pago\", \"Pago\"];\n          return status[value];\n        }\n      }, {\n        id: 'price',\n        label: 'Valor',\n        minWidth: 170,\n        align: 'right',\n        format: function format(value) {\n          return 'R$ ' + formatToBRL(value);\n        }\n      }, {\n        id: 'created_at',\n        label: 'Validade',\n        minWidth: 170,\n        align: 'right',\n        format: function format(value) {\n          return stringToaddDate(value, \"DD/MM/yyyy\", {\n            qtd: 1,\n            period: 'M'\n          });\n        }\n      }];\n      return React.createElement(View, null, React.createElement(Fragment, null, invoices === undefined ? React.createElement(ListLoading, null) : React.createElement(Paper, null, React.createElement(TableContainer, {\n        style: {\n          margin: 0,\n          width: '100%'\n        }\n      }, React.createElement(Table, {\n        stickyHeader: true,\n        \"aria-label\": \"sticky table\"\n      }, React.createElement(TableHead, null, React.createElement(TableRow, null, columns.map(function (column) {\n        return React.createElement(TableCell, {\n          key: column.id,\n          align: column.align,\n          style: {\n            minWidth: column.minWidth\n          }\n        }, column.label);\n      }))), React.createElement(TableBody, null, invoices.data.map(function (row) {\n        return React.createElement(TableRow, {\n          hover: true,\n          role: \"checkbox\",\n          tabIndex: -1,\n          key: row.Id,\n          onClick: function onClick() {\n            return _this2.dialogHandler(row);\n          }\n        }, columns.map(function (column) {\n          var value = row[column.id];\n          return React.createElement(TableCell, {\n            key: column.id,\n            align: column.align\n          }, column.format ? column.format(value) : value);\n        }));\n      }))))), React.createElement(FullScreenInvoiceDialog, {\n        item: item\n      })));\n    }\n  }]);\n\n  return Invoices;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(store) {\n  return {\n    invoiceDialog: store.invoiceReducer.invoiceDialog\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    setDialog: setDialog\n  }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Invoices);","map":{"version":3,"sources":["C:/Users/Maou/Documents/Projetos/CLIENTES/RNF/client/src/pages/Invoices/index.js"],"names":["React","Component","Fragment","connect","bindActionCreators","getInvoices","stringToaddDate","formatToBRL","setDialog","FullScreenInvoiceDialog","ListLoading","DataGrid","RowsProp","ColDef","Paper","Table","TableBody","TableCell","TableContainer","TableHead","TablePagination","TableRow","Slide","Invoices","state","invoices","undefined","item","dialog","Transition","forwardRef","props","ref","response","setState","columns","id","label","minWidth","align","format","value","status","qtd","period","margin","width","map","column","data","row","Id","dialogHandler","mapStateToProps","store","invoiceDialog","invoiceReducer","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { bindActionCreators } from 'redux';\r\nimport { StyleSheet, Text, View, Platform } from \"react-native\";\r\n\r\nimport { getInvoices } from '../../providers/api'\r\nimport { stringToaddDate, formatToBRL } from '../../providers/commonMethods'\r\nimport { setDialog } from '../../actions/invoiceAction'\r\nimport FullScreenInvoiceDialog from '../../components/Layout/Dialogs/FullScreenInvoiceDialog'\r\nimport ListLoading from '../../components/Loading/ListLoading'\r\n/** Assets */\r\nimport { DataGrid, RowsProp, ColDef } from '@material-ui/data-grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Slide from '@material-ui/core/Slide';\r\n\r\nclass Invoices extends Component {\r\n    state = {\r\n        invoices: undefined,\r\n        item: undefined,\r\n        dialog: false\r\n    }\r\n    //\r\n    Transition = React.forwardRef(function Transition(props, ref) {\r\n      return <Slide direction=\"up\" ref={ref} {...props} />;\r\n    });\r\n\r\n    async componentDidMount() {\r\n        const response = await getInvoices();\r\n        this.setState({ ...this.state, invoices: response });\r\n    }\r\n\r\n    dialogHandler(item) {\r\n        this.props.setDialog(true);\r\n        this.setState({ ...this.state, item });\r\n    }\r\n\r\n    render() {\r\n        let { invoices, item } = this.state;\r\n\r\n          const columns = [\r\n            { id: 'title', label: 'Titulo' },\r\n            {\r\n              id: 'status',\r\n              label: 'Situação',\r\n              minWidth: 170,\r\n              align: 'right',\r\n              format: (value) => {\r\n                //value.length > 50 ? value.substring(0,50) + \"...\" : value\r\n                const status = [\r\n                  \"Em Aberto\",\r\n                  \"Pendente\",\r\n                  \"Processando\",\r\n                  \"Pago\",\r\n                  \"Pago\"\r\n                ]\r\n                return status[value]\r\n              },\r\n            },\r\n            {\r\n              id: 'price',\r\n              label: 'Valor',\r\n              minWidth: 170,\r\n              align: 'right',\r\n              format: (value) => 'R$ ' + formatToBRL(value),\r\n            },\r\n            {\r\n              id: 'created_at',\r\n              label: 'Validade',\r\n              minWidth: 170,\r\n              align: 'right',\r\n              format: (value) => stringToaddDate(value,\"DD/MM/yyyy\",{ qtd: 1, period: 'M'}),\r\n            },\r\n          ];\r\n        return (\r\n            <View>\r\n              <Fragment>\r\n              { invoices === undefined ? (<ListLoading />) :   (\r\n                 <Paper>\r\n                    <TableContainer style={{\r\n                          margin: 0,\r\n                          width: '100%',\r\n                        }}>\r\n                      <Table stickyHeader aria-label=\"sticky table\">\r\n                        <TableHead>\r\n                          <TableRow>\r\n                            {columns.map((column) => (\r\n                              <TableCell\r\n                                key={column.id}\r\n                                align={column.align}\r\n                                style={{ minWidth: column.minWidth }}\r\n                              >\r\n                                {column.label}\r\n                              </TableCell>\r\n                            ))}\r\n                          </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                          {invoices.data.map(row => {\r\n                            return (\r\n                              <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.Id} onClick={() => this.dialogHandler(row)}>\r\n                                {columns.map((column) => {\r\n                                  const value = row[column.id];\r\n                                  return (\r\n                                    <TableCell key={column.id} align={column.align}>\r\n                                      {column.format ? column.format(value) : value}\r\n                                    </TableCell>\r\n                                  );\r\n                                })}\r\n                              </TableRow>\r\n                            );\r\n                          })}\r\n                        </TableBody>\r\n                      </Table>\r\n                    </TableContainer>\r\n                  </Paper>)}\r\n                <FullScreenInvoiceDialog item={item} />\r\n                </Fragment>\r\n            </View>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = store => ({\r\n  invoiceDialog: store.invoiceReducer.invoiceDialog\r\n  });\r\nconst mapDispatchToProps = dispatch =>\r\n  bindActionCreators({ setDialog }, dispatch);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Invoices)"]},"metadata":{},"sourceType":"module"}