{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component, Fragment, useState, useRef } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { DataGrid, RowsProp, ColDef } from '@material-ui/data-grid';\nimport { setSnackbar } from \"../../actions/appActions\";\nimport { DEFAULT_LOCALE_TEXT } from \"../../providers/langs/datagrid\";\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TextField from '@material-ui/core/TextField';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport IconButton from '@material-ui/core/IconButton';\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport SearchIcon from '@material-ui/icons/Search';\nimport ReorderIcon from '@material-ui/icons/Reorder';\nimport ptBR from \"date-fns/locale/pt-BR\";\nimport Grid from '@material-ui/core/Grid';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { MuiPickersUtilsProvider, KeyboardTimePicker, KeyboardDatePicker } from '@material-ui/pickers';\nimport PropTypes from 'prop-types';\nimport MaskedInput from 'react-text-mask';\nimport { validaCpf } from \"../../providers/commonMethods\";\nvar idNumbers = ['cpf', 'cnpj'];\n\nfunction TextMaskCustom(props) {\n  var inputRef = props.inputRef,\n      other = _objectWithoutProperties(props, [\"inputRef\"]);\n\n  return React.createElement(MaskedInput, _extends({}, other, {\n    ref: function ref(_ref) {\n      inputRef(_ref ? _ref.inputElement : null);\n    },\n    value: props.value,\n    mask: props.mask,\n    placeholderChar: \"\\u2000\"\n  }));\n}\n\nvar DateInput = function DateInput(props) {\n  var _props$label, _props$helperText;\n\n  var _useState = useState(props.value),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      error = _useState4[0],\n      setError = _useState4[1];\n\n  function handleChange(e) {\n    try {\n      props.onChange(e);\n    } catch (err) {\n      console.log(err);\n    }\n\n    setValue(e);\n  }\n\n  return React.createElement(\"form\", {\n    noValidate: true,\n    style: _objectSpread(_objectSpread({}, props.style), {}, {\n      marginTop: 20\n    })\n  }, React.createElement(TextField, {\n    style: {\n      width: '100%'\n    },\n    id: props.id,\n    label: (_props$label = props.label) != null ? _props$label : 'Data',\n    type: \"date\",\n    defaultValue: value,\n    onChange: handleChange,\n    onBlur: handleChange,\n    error: error,\n    helperText: error == true ? (_props$helperText = props.helperText) != null ? _props$helperText : \"Data invÃ¡lida\" : \"\",\n    InputLabelProps: {\n      shrink: true\n    }\n  }));\n};\n\nvar SelectInput = function SelectInput(props) {\n  var _useState5 = useState(props.values[0]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      value = _useState6[0],\n      setValue = _useState6[1];\n\n  function handleChange(e) {\n    props.onBlur(e);\n    setValue(e.target.value);\n  }\n\n  return React.createElement(FormControl, {\n    id: props.column,\n    style: _objectSpread(_objectSpread({}, props.style), {}, {\n      marginTop: '25px'\n    })\n  }, React.createElement(InputLabel, {\n    id: props.column\n  }, props.label), React.createElement(Select, {\n    labelId: props.id,\n    id: props.id,\n    name: props.name,\n    value: props.value,\n    onChange: handleChange,\n    onBlur: handleChange\n  }, props.values.map(function (val) {\n    return React.createElement(MenuItem, {\n      value: val\n    }, val);\n  })));\n};\n\nvar StyledDataGrid = withStyles({\n  root: {\n    '& div.MuiDataGrid-root .MuiDataGrid-viewport': {\n      width: \"600px\",\n      background: \"blue\"\n    }\n  }\n})(DataGrid);\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      \"& div.react-grid-Container\": {\n        color: \"red\"\n      }\n    }\n  };\n});\n\nvar LCardGrid = function (_Component) {\n  _inherits(LCardGrid, _Component);\n\n  var _super = _createSuper(LCardGrid);\n\n  function LCardGrid() {\n    var _this;\n\n    _classCallCheck(this, LCardGrid);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      data: [],\n      filters: {},\n      last_page: 1,\n      page: 1,\n      filter: 'flex',\n      loading: true,\n      firstLoad: true\n    };\n    return _this;\n  }\n\n  _createClass(LCardGrid, [{\n    key: \"setPage\",\n    value: function setPage() {\n      var params,\n          cleanfilters,\n          query,\n          data,\n          _args = arguments;\n      return _regeneratorRuntime.async(function setPage$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              params = _args.length > 0 && _args[0] !== undefined ? _args[0] : {\n                page: 1\n              };\n              this.setState(_objectSpread(_objectSpread({}, this.state), {}, {\n                loading: true\n              }));\n              cleanfilters = {};\n              Object.entries(this.state.filters).map(function (item) {\n                if (item[1].length >= 1) {\n                  if (item[1] !== \"Todos\") {\n                    cleanfilters[item[0]] = item[1];\n                    console.log(item);\n                  }\n                }\n              });\n              query = _extends({\n                queryType: 'like',\n                withId: \"name\",\n                page: params.page\n              }, cleanfilters);\n              console.log(query);\n              _context.next = 8;\n              return _regeneratorRuntime.awrap(this.props.pageRequest(query));\n\n            case 8:\n              data = _context.sent;\n\n              if (data !== undefined) {\n                this.setState(_objectSpread(_objectSpread({}, this.state), {}, {\n                  data: data,\n                  loading: false\n                }));\n              }\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var filters;\n      return _regeneratorRuntime.async(function componentDidMount$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              filters = {};\n              this.props.filterInputs.map(function (input) {\n                var _input$value;\n\n                filters[input.column] = (_input$value = input.value) != null ? _input$value : \"\";\n              });\n              this.setState(_objectSpread(_objectSpread({}, this.state), {}, {\n                filters: filters\n              }));\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this,\n          _this$state$data$data;\n\n      var classes = {\n        m5: {\n          margin: 5,\n          marginTop: 25\n        },\n        root: {\n          maxWidth: 345,\n          marginBottom: 25\n        },\n        media: {\n          height: 140\n        }\n      };\n      var filters = this.state.filters;\n\n      var onChangeInputs = function onChangeInputs(e) {\n        var value = e.target.value;\n\n        if (idNumbers.includes(e.target.id)) {\n          value = value.replace(/[^\\d]+/g, '');\n        }\n\n        if (value.length == 0) {\n          var _e$target$id;\n\n          delete filters[(_e$target$id = e.target.id) != null ? _e$target$id : e.target.name];\n        } else {\n          var _e$target$id2;\n\n          if (e.target.id == 'created_at') {\n            value = \"\" + value.toJSON().split('T')[0];\n          }\n\n          if (e.target.id == 'nome') {}\n\n          if (idNumbers.includes(e.target.id)) {\n            value = value.replace(/[^\\d]+/g, '');\n          }\n\n          filters[(_e$target$id2 = e.target.id) != null ? _e$target$id2 : e.target.name] = value;\n\n          _this2.setState(_objectSpread(_objectSpread({}, _this2.state), {}, {\n            filters: filters\n          }));\n        }\n      };\n\n      var onClearFilter = function onClearFilter() {\n        var filters = {};\n\n        _this2.props.filterInputs.map(function (input) {\n          var _input$value2;\n\n          filters[input.column] = (_input$value2 = input.value) != null ? _input$value2 : \"\";\n        });\n\n        _this2.setState(_objectSpread(_objectSpread({}, _this2.state), {}, {\n          filters: filters\n        }));\n      };\n\n      var rows = (_this$state$data$data = this.state.data.data) != null ? _this$state$data$data : [];\n      var columns = this.props.columns;\n      return React.createElement(\"div\", null, React.createElement(Card, {\n        className: classes.root,\n        style: {\n          marginBottom: 15\n        }\n      }, React.createElement(CardContent, null, React.createElement(Typography, {\n        onClick: function onClick() {\n          _this2.setState(_objectSpread(_objectSpread({}, _this2.state), {}, {\n            filter: _this2.state.filter == 'none' ? 'flex' : 'none'\n          }));\n        }\n      }, React.createElement(FilterListIcon, null), \" Filtros\"), React.createElement(\"div\", {\n        id: \"filter-form\",\n        style: {\n          alignItems: 'center',\n          flexFlow: 'row wrap',\n          justifyContent: 'space-around',\n          display: this.state.filter\n        }\n      }, this.props.filterInputs.map(function (input) {\n        if (input.type == \"text\") {\n          var _this2$state$filters$, _input$grow, _input$flexBasis, _input$grow2, _this2$state$filters$2, _this2$state$filters$3;\n\n          if (input.mask === undefined) return React.createElement(TextField, {\n            value: (_this2$state$filters$ = _this2.state.filters[input.column]) != null ? _this2$state$filters$ : \"\",\n            style: _objectSpread(_objectSpread({}, classes.m5), {}, {\n              flexGrow: (_input$grow = input.grow) != null ? _input$grow : 0,\n              flexBasis: (_input$flexBasis = input.flexBasis) != null ? _input$flexBasis : '30%'\n            }),\n            id: input.column,\n            label: input.label,\n            onChange: onChangeInputs,\n            onBlur: onChangeInputs\n          });else return React.createElement(FormControl, {\n            style: _objectSpread(_objectSpread({}, classes.m5), {}, {\n              flexGrow: (_input$grow2 = input.grow) != null ? _input$grow2 : 0\n            })\n          }, React.createElement(InputLabel, {\n            htmlFor: \"formatted-text-mask-input\"\n          }, input.label), React.createElement(Input, {\n            value: (_this2$state$filters$2 = _this2.state.filters[input.column]) != null ? _this2$state$filters$2 : \"\",\n            onChange: onChangeInputs,\n            onFocus: function onFocus(e) {\n              if (e.target.value.length == 0) {\n                e.target.setSelectionRange(0, e.target.value.length);\n              }\n            },\n            name: input.column,\n            id: input.column,\n            value: (_this2$state$filters$3 = _this2.state.filters[input.column]) != null ? _this2$state$filters$3 : \"\",\n            inputProps: {\n              mask: input.mask\n            },\n            inputComponent: TextMaskCustom\n          }));\n        } else if (input.type == \"date\") {\n          var _input$grow3;\n\n          return React.createElement(DateInput, {\n            label: input.label,\n            id: input.column,\n            style: _objectSpread(_objectSpread({}, classes.m5), {}, {\n              flexGrow: (_input$grow3 = input.grow) != null ? _input$grow3 : 0\n            }),\n            onChange: onChangeInputs,\n            onBlur: onChangeInputs\n          });\n        } else if (input.type == \"select\") {\n          var _this2$state$filters$4, _input$grow4;\n\n          return React.createElement(SelectInput, {\n            id: input.column,\n            label: input.label,\n            name: input.column,\n            value: (_this2$state$filters$4 = _this2.state.filters[input.column]) != null ? _this2$state$filters$4 : \"\",\n            values: input.values,\n            style: _objectSpread(_objectSpread({}, classes.m5), {}, {\n              flexGrow: (_input$grow4 = input.grow) != null ? _input$grow4 : 0\n            }),\n            onBlur: onChangeInputs\n          });\n        }\n      }), React.createElement(\"div\", null, React.createElement(Button, {\n        size: \"small\",\n        style: {\n          margin: 5\n        },\n        startIcon: React.createElement(SearchIcon, null),\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: function onClick() {\n          _this2.setPage(_this2.state.filters);\n\n          _this2.setState(_objectSpread(_objectSpread({}, _this2.state), {}, {\n            firstLoad: false\n          }));\n        }\n      }, \" Pesquisar\"), React.createElement(Button, {\n        size: \"small\",\n        style: {\n          margin: 5\n        },\n        startIcon: React.createElement(ReorderIcon, null),\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: function onClick() {\n          onClearFilter();\n        }\n      }, \" Limpar\"))))), !this.state.firstLoad && React.createElement(\"div\", {\n        style: {\n          height: 450,\n          width: '100%'\n        }\n      }, rows.map(function (row, key) {\n        return React.createElement(Card, {\n          style: {\n            marginTop: 15\n          }\n        }, React.createElement(CardContent, null, Object.entries(row).map(function (field) {\n          var headerName = columns.find(function (column) {\n            return column.field === field[0];\n          });\n\n          if (headerName && headerName.field !== 'id') {\n            var _headerName$valueForm;\n\n            var value = (_headerName$valueForm = headerName.valueFormatter) != null ? _headerName$valueForm : headerName.renderCell;\n            value = value == undefined ? field[1] : value({\n              value: field[1]\n            });\n            return React.createElement(List, {\n              component: \"nav\"\n            }, React.createElement(ListItem, {\n              style: {\n                paddingTop: 0,\n                paddingBottom: 0\n              }\n            }, React.createElement(ListItemText, {\n              primary: \"\" + headerName.headerName,\n              secondary: \"\" + value\n            })));\n          }\n        })), React.createElement(CardActions, {\n          style: {\n            justifyContent: 'center'\n          }\n        }, Object.entries(row).map(function (field) {\n          var headerName = columns.find(function (column) {\n            return column.field === field[0];\n          });\n\n          if (headerName && headerName.field == 'id') {\n            return headerName.renderCell({\n              value: field[1],\n              row: row\n            }, row);\n          }\n        })));\n      }), React.createElement(Card, {\n        style: {\n          marginTop: 15\n        }\n      }, React.createElement(TablePagination, {\n        component: \"div\",\n        localeText: DEFAULT_LOCALE_TEXT,\n        count: this.state.data.total,\n        page: this.state.data.current_page - 1,\n        onChangePage: function onChangePage(e, params) {\n          console.log(params);\n\n          var filters = _extends({}, _this2.state.filters, {\n            page: params + 1,\n            pageSize: 10\n          });\n\n          _this2.setState(_objectSpread(_objectSpread({}, _this2.state), {}, {\n            filters: filters\n          }));\n\n          _this2.setPage(filters);\n        },\n        labelDisplayedRows: function labelDisplayedRows(_ref2) {\n          var from = _ref2.from,\n              to = _ref2.to,\n              count = _ref2.count;\n          return from + \"-\" + to + \" de \" + (count !== -1 ? count : to);\n        },\n        labelRowsPerPage: \"Registros: \",\n        rowsPerPage: 10\n      }))));\n    }\n  }]);\n\n  return LCardGrid;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(store) {\n  return {};\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    setSnackbar: setSnackbar\n  }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LCardGrid);","map":{"version":3,"sources":["C:/Users/Maou/Documents/Projetos/CLIENTES/RNF/Completo/client/src/components/List/cardgrid.js"],"names":["React","Component","Fragment","useState","useRef","connect","bindActionCreators","DataGrid","RowsProp","ColDef","setSnackbar","DEFAULT_LOCALE_TEXT","makeStyles","withStyles","Card","CardActionArea","CardActions","CardContent","CardMedia","Button","Typography","List","ListItem","ListItemIcon","ListItemText","TablePagination","TextField","Input","InputLabel","MenuItem","FormHelperText","FormControl","Select","IconButton","FilterListIcon","SearchIcon","ReorderIcon","ptBR","Grid","DateFnsUtils","MuiPickersUtilsProvider","KeyboardTimePicker","KeyboardDatePicker","PropTypes","MaskedInput","validaCpf","idNumbers","TextMaskCustom","props","inputRef","other","ref","inputElement","value","mask","DateInput","setValue","error","setError","handleChange","e","onChange","err","console","log","style","marginTop","width","id","label","helperText","shrink","SelectInput","values","onBlur","target","column","name","map","val","StyledDataGrid","root","background","useStyles","theme","color","LCardGrid","state","data","filters","last_page","page","filter","loading","firstLoad","params","setState","cleanfilters","Object","entries","item","length","query","queryType","withId","pageRequest","undefined","filterInputs","input","classes","m5","margin","maxWidth","marginBottom","media","height","onChangeInputs","includes","replace","toJSON","split","onClearFilter","rows","columns","alignItems","flexFlow","justifyContent","display","type","flexGrow","grow","flexBasis","setSelectionRange","setPage","row","key","field","headerName","find","valueFormatter","renderCell","paddingTop","paddingBottom","total","current_page","pageSize","from","to","count","mapStateToProps","store","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component, Fragment, useState, useRef } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { bindActionCreators } from 'redux';\r\n//\r\nimport { DataGrid, RowsProp, ColDef } from '@material-ui/data-grid';\r\n//\r\nimport { setSnackbar } from '../../actions/appActions'\r\nimport { DEFAULT_LOCALE_TEXT } from '../../providers/langs/datagrid'\r\n//const classes = useStyles();\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\n//\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Input from '@material-ui/core/Input';\r\n\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport FilterListIcon from '@material-ui/icons/FilterList';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport ReorderIcon from '@material-ui/icons/Reorder';\r\n\r\nimport ptBR from \"date-fns/locale/pt-BR\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport {\r\n    MuiPickersUtilsProvider,\r\n    KeyboardTimePicker,\r\n    KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\n\r\nimport PropTypes from 'prop-types';\r\nimport MaskedInput from 'react-text-mask';\r\n\r\n// VALIDATORS\r\n\r\nimport { validaCpf } from '../../providers/commonMethods'\r\n//\r\n\r\n//const [valus, setValues] = useState(new Date('2021-02-13'));\r\nconst idNumbers = [\r\n    'cpf', 'cnpj'\r\n];\r\n// MASKED INPUTS \r\n\r\nfunction TextMaskCustom(props) {\r\n    const { inputRef, ...other } = props;\r\n\r\n    return (\r\n        <MaskedInput\r\n            {...other}\r\n            ref={(ref) => {\r\n                inputRef(ref ? ref.inputElement : null);\r\n            }}\r\n            value={props.value}\r\n            mask={props.mask}\r\n            placeholderChar={'\\u2000'}\r\n\r\n        />\r\n    );\r\n}\r\n\r\n\r\n//\r\nconst DateInput = (props) => {\r\n    const [value, setValue] = useState(props.value);\r\n    const [error, setError] = useState(false);\r\n    function handleChange(e) {\r\n        //let e = { target: { id: props.id, value: `${value.toJSON().split('T')[0]}` } }\r\n        try {\r\n            //inputValues[props.id] = `${value.toJSON().split('T')[0]}`\r\n            props.onChange(e)\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n        setValue(e);\r\n    }\r\n    return (<form noValidate style={{ ...props.style, marginTop: 20 }} >\r\n        <TextField\r\n            style={{width: '100%'}} \r\n            id={props.id}\r\n            label={props.label ?? 'Data'}\r\n            type=\"date\"\r\n            defaultValue={value}\r\n            onChange={handleChange}\r\n            onBlur={handleChange}\r\n            error={error}\r\n            helperText={error == true ? props.helperText ?? \"Data invÃ¡lida\" : \"\"}\r\n            InputLabelProps={{\r\n                shrink: true,\r\n            }}\r\n        />\r\n    </form>)\r\n}\r\n//\r\n\r\nconst SelectInput = (props) => {\r\n    const [value, setValue] = useState(props.values[0]);\r\n    function handleChange(e) {\r\n        props.onBlur(e)\r\n        setValue(e.target.value);\r\n    }\r\n    return (\r\n        <FormControl id={props.column} style={{ ...props.style, marginTop: '25px' }}>\r\n            <InputLabel id={props.column}>{props.label}</InputLabel>\r\n            <Select\r\n                labelId={props.id}\r\n                id={props.id}\r\n                name={props.name}\r\n                value={props.value}\r\n                onChange={handleChange}\r\n                onBlur={handleChange}\r\n            >\r\n                {\r\n                    props.values.map(val => {\r\n                        return <MenuItem value={val}>{val}</MenuItem>\r\n                    })\r\n                }\r\n\r\n            </Select>\r\n        </FormControl>)\r\n}\r\nconst StyledDataGrid = withStyles({\r\n    root: {\r\n        '& div.MuiDataGrid-root .MuiDataGrid-viewport': {\r\n            width: \"600px\",\r\n            background: \"blue\"\r\n        },\r\n    }\r\n})(DataGrid);\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        \"& div.react-grid-Container\": {\r\n            color: \"red\",\r\n            // color: theme.palette.text.color\r\n        }\r\n    }\r\n}));\r\nclass LCardGrid extends Component {\r\n    state = {\r\n        data: [],\r\n        filters: {},\r\n        last_page: 1,\r\n        page: 1,\r\n        filter: 'flex',\r\n        loading: true,\r\n        firstLoad: true\r\n    }\r\n    async setPage(params = { page: 1 }) {\r\n        this.setState({ ...this.state, loading: true })\r\n        let cleanfilters = {};\r\n        Object.entries(this.state.filters).map((item) => {\r\n            if(item[1].length >= 1 ) {\r\n                if(item[1] !== \"Todos\"){\r\n                    cleanfilters[item[0]] = item[1];\r\n                    console.log(item);\r\n                }\r\n            }\r\n        });\r\n\r\n        let query = Object.assign({ queryType: 'like', withId: \"name\", page: params.page }, cleanfilters);\r\n        console.log(query);\r\n        const data = await this.props.pageRequest(query);\r\n        if (data !== undefined) {\r\n            this.setState({ ...this.state, data, loading: false })\r\n        }\r\n\r\n    }\r\n    async componentDidMount() {\r\n        let filters = {};\r\n        this.props.filterInputs.map(input => {\r\n            filters[input.column] = input.value ?? \"\";\r\n        });\r\n\r\n        this.setState({ ...this.state, filters });\r\n\r\n    }\r\n\r\n    render() {\r\n        const classes = {\r\n            m5: {\r\n                margin: 5,\r\n                marginTop: 25,\r\n                //flexBasis: '30%'\r\n\r\n            },\r\n            root: {\r\n                maxWidth: 345,\r\n                marginBottom: 25\r\n            },\r\n            media: {\r\n                height: 140,\r\n            },\r\n        }\r\n        let filters = this.state.filters;\r\n        const onChangeInputs = (e) => {\r\n            let value = e.target.value;\r\n            if (idNumbers.includes(e.target.id)) {\r\n                value = value.replace(/[^\\d]+/g, '');\r\n            }\r\n            if (value.length == 0) {\r\n                delete filters[e.target.id ?? e.target.name];\r\n            } else {\r\n                if (e.target.id == 'created_at') {\r\n                    value = `${value.toJSON().split('T')[0]}`\r\n                }\r\n                if (e.target.id == 'nome') {\r\n                    //filters[\"withId\"] = \"name\"\r\n                }\r\n                if (idNumbers.includes(e.target.id)) {\r\n                    value = value.replace(/[^\\d]+/g, '');\r\n                }\r\n                filters[e.target.id ?? e.target.name] = value\r\n                this.setState({ ...this.state, filters });\r\n            }\r\n        }\r\n\r\n        const onClearFilter = () => {\r\n            let filters = {};\r\n            this.props.filterInputs.map(input => {\r\n                filters[input.column] = input.value ?? \"\";\r\n            });\r\n\r\n            this.setState({ ...this.state, filters });\r\n        }\r\n        const rows: RowsProp = this.state.data.data ?? [];\r\n\r\n        const columns: ColDef[] = this.props.columns;\r\n        return (\r\n            <div>\r\n                <Card className={classes.root} style={{ marginBottom: 15 }}>\r\n                    <CardContent>\r\n                        <Typography onClick={() => {\r\n                            this.setState({ ...this.state, filter: this.state.filter == 'none' ? 'flex' : 'none' })\r\n                        }}>\r\n                            <FilterListIcon /> Filtros\r\n                    </Typography>\r\n\r\n                        <div id=\"filter-form\" style={{\r\n                            alignItems: 'center',\r\n                            flexFlow: 'row wrap',\r\n                            justifyContent: 'space-around',\r\n                            display: this.state.filter,\r\n                        }}>\r\n                            {\r\n                                this.props.filterInputs.map(input => {\r\n                                    if (input.type == \"text\") {\r\n                                        if (input.mask === undefined)\r\n                                            return <TextField value={this.state.filters[input.column] ?? \"\"} style={{ ...classes.m5, flexGrow: input.grow ?? 0, flexBasis: input.flexBasis ?? '30%' }} id={input.column} label={input.label} onChange={onChangeInputs} onBlur={onChangeInputs} />\r\n                                        else\r\n                                            return (\r\n                                                <FormControl style={{ ...classes.m5, flexGrow: input.grow ?? 0 }} >\r\n                                                    <InputLabel htmlFor=\"formatted-text-mask-input\">{input.label}</InputLabel>\r\n                                                    <Input\r\n                                                        value={this.state.filters[input.column] ?? \"\"}\r\n                                                        onChange={onChangeInputs}\r\n                                                        onFocus={(e) => {\r\n                                                            if (e.target.value.length == 0) {\r\n                                                                //alert(e.target.value);\r\n                                                                e.target.setSelectionRange(0, e.target.value.length)\r\n                                                            }\r\n                                                        }}\r\n                                                        name={input.column}\r\n                                                        id={input.column}\r\n                                                        value={this.state.filters[input.column] ?? \"\"}\r\n                                                        inputProps={{\r\n                                                            mask: input.mask\r\n                                                        }}\r\n                                                        inputComponent={TextMaskCustom}\r\n                                                    />\r\n                                                </FormControl>)\r\n\r\n                                    } else if (input.type == \"date\") {\r\n                                        return <DateInput label={input.label}  id={input.column} style={{ ...classes.m5, flexGrow: input.grow ?? 0 }} onChange={onChangeInputs}  onBlur={onChangeInputs} />\r\n                                    } else if (input.type == \"select\") {\r\n                                        return (<SelectInput id={input.column} label={input.label} name={input.column} value={this.state.filters[input.column] ?? \"\"} values={input.values} style={{ ...classes.m5, flexGrow: input.grow ?? 0 }} onBlur={onChangeInputs} />)\r\n                                    }\r\n                                })\r\n                            }\r\n                            <div>\r\n                                <Button size=\"small\" style={{ margin: 5 }} startIcon={<SearchIcon />} variant=\"contained\" color=\"primary\" onClick={() => { this.setPage(this.state.filters); this.setState({ ...this.state, firstLoad: false }) }}> Pesquisar</Button>\r\n                                <Button size=\"small\" style={{ margin: 5 }} startIcon={<ReorderIcon />} variant=\"contained\" color=\"primary\" onClick={() => { onClearFilter() }} > Limpar</Button>\r\n                            </div>\r\n                        </div>\r\n                    </CardContent>\r\n                </Card>\r\n\r\n\r\n                {!this.state.firstLoad &&\r\n                    <div style={{ height: 450, width: '100%' }}>\r\n                        {rows.map((row, key) => {\r\n                            return (\r\n                                <Card style={{marginTop: 15}}>\r\n                                    <CardContent>\r\n                                        {Object.entries(row).map(field => {\r\n                                            let headerName = columns.find(column => column.field === field[0]);\r\n                                            if (headerName && headerName.field !== 'id') {\r\n                                                //console.log(headerName)\r\n                                                let value = headerName.valueFormatter ?? headerName.renderCell;\r\n                                                value = value == undefined? field[1] : value({value: field[1]});  \r\n                                                return (\r\n                                                    <List component=\"nav\">\r\n                                                        <ListItem style={{paddingTop: 0, paddingBottom: 0}}>\r\n                                                            <ListItemText primary={`${headerName.headerName}`} secondary={`${value}`} />\r\n                                                        </ListItem>\r\n                                                    </List>\r\n                                                )}\r\n                                        })}\r\n                                    </CardContent>\r\n                                    <CardActions style={{justifyContent: 'center'}}>\r\n                                    {Object.entries(row).map(field => {\r\n                                        let headerName = columns.find(column => column.field === field[0]);\r\n                                        if(headerName && headerName.field == 'id') {\r\n                                            return headerName.renderCell({value: field[1], row }, row);\r\n                                        }\r\n                                    })}\r\n                                    </CardActions>\r\n                                </Card>\r\n                            )\r\n                        }\r\n                        )}\r\n                        <Card style={{marginTop: 15}}>\r\n                        <TablePagination\r\n                            component=\"div\"\r\n                            localeText={DEFAULT_LOCALE_TEXT}\r\n                            count={this.state.data.total}\r\n                            page={this.state.data.current_page-1}\r\n                            onChangePage={(e,params) => {\r\n                                console.log(params)\r\n                                let filters = Object.assign({}, this.state.filters,{ page: params+1, pageSize: 10 });\r\n                                this.setState({...this.state, filters});\r\n                                this.setPage(filters);\r\n                            }}\r\n                            labelDisplayedRows={({ from, to, count }) => {\r\n                                return `${from}-${to} de ${count !== -1 ? count :  to}`\r\n                            }}\r\n                            labelRowsPerPage={`Registros: `}\r\n                            rowsPerPage={10}\r\n                            />\r\n                        </Card>\r\n                    </div>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = store => ({\r\n\r\n});\r\nconst mapDispatchToProps = dispatch =>\r\n    bindActionCreators({ setSnackbar }, dispatch);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LCardGrid)\r\n"]},"metadata":{},"sourceType":"module"}