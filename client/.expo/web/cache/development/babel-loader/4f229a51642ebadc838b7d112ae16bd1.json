{"ast":null,"code":"import moment from 'moment';\nexport var stringToDate = function stringToDate(_date, _format) {\n  return moment(_date).format(_format);\n};\nexport var stringToaddDate = function stringToaddDate(_date, _format) {\n  var add = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    qtd: 1,\n    period: 'M'\n  };\n  return moment(_date).add(add.qtd, add.period).format(_format);\n};\nexport var formatToBRL = function formatToBRL(_valor) {\n  _valor = _valor + '';\n  _valor = parseInt(_valor.replace(/[\\D]+/g, ''));\n  _valor = _valor + '';\n  _valor = _valor.replace(/([0-9]{2})$/g, \",$1\");\n\n  if (_valor.length > 6) {\n    _valor = _valor.replace(/([0-9]{3}),([0-9]{2}$)/g, \".$1,$2\");\n  }\n\n  return _valor;\n};\nexport var checkImageUrl = function checkImageUrl(imageUrl) {\n  var img = new Image();\n  img.src = imageUrl;\n\n  if (img.height > 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\nexport function validaCpf() {\n  var strCPF = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  strCPF = strCPF.replace(/[^\\d]+/g, '');\n  var Soma;\n  var Resto;\n  Soma = 0;\n  if (strCPF == \"00000000000\") return false;\n  if (strCPF.length < 11) return false;\n  if (strCPF.length < 11) return false;\n\n  for (var i = 1; i <= 9; i++) {\n    Soma = Soma + parseInt(strCPF.substring(i - 1, i)) * (11 - i);\n  }\n\n  Resto = Soma * 10 % 11;\n  if (Resto == 10 || Resto == 11) Resto = 0;\n  if (Resto != parseInt(strCPF.substring(9, 10))) return false;\n  Soma = 0;\n\n  for (var _i = 1; _i <= 10; _i++) {\n    Soma = Soma + parseInt(strCPF.substring(_i - 1, _i)) * (12 - _i);\n  }\n\n  ;\n  Resto = Soma * 10 % 11;\n  if (Resto == 10 || Resto == 11) Resto = 0;\n  if (Resto != parseInt(strCPF.substring(10, 11))) return false;\n  return true;\n}","map":{"version":3,"sources":["C:/Users/Maou/Documents/Projetos/CLIENTES/RNF/client/src/providers/commonMethods/index.js"],"names":["moment","stringToDate","_date","_format","format","stringToaddDate","add","qtd","period","formatToBRL","_valor","parseInt","replace","length","checkImageUrl","imageUrl","img","Image","src","height","validaCpf","strCPF","Soma","Resto","i","substring"],"mappings":"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","sourcesContent":["import moment from 'moment';\r\nexport const stringToDate = (_date,_format) =>\r\n{\r\n  return moment(_date).format(_format);\r\n}\r\nexport const stringToaddDate = (_date,_format,add = { qtd : 1, period : 'M'}) =>\r\n{\r\n  return moment(_date).add(add.qtd, add.period).format(_format);\r\n}\r\n\r\nexport const formatToBRL = (_valor) => {\r\n  \r\n  _valor = _valor + '';\r\n  _valor = parseInt(_valor.replace(/[\\D]+/g,''));\r\n  _valor = _valor + '';\r\n  _valor = _valor.replace(/([0-9]{2})$/g, \",$1\");\r\n\r\n  if (_valor.length > 6) {\r\n    _valor = _valor.replace(/([0-9]{3}),([0-9]{2}$)/g, \".$1,$2\");\r\n  }\r\n\r\n  return _valor;\r\n}\r\n\r\nexport const checkImageUrl = (imageUrl) => {\r\n  var img = new Image();\r\n  img.src = imageUrl;\r\n  if(img.height>0){\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport function validaCpf(strCPF = \"\") {\r\n  //console.log(strCPF);\r\n  strCPF = strCPF.replace(/[^\\d]+/g, '');\r\n  var Soma;\r\n  var Resto;\r\n  Soma = 0;\r\nif (strCPF == \"00000000000\") return false;\r\nif (strCPF.length < 11) return false;\r\n\r\nif (strCPF.length < 11 ) return false;\r\nfor (let i=1; i<=9; i++) {\r\n  Soma = Soma + parseInt(strCPF.substring(i-1, i)) * (11 - i);\r\n}\r\nResto = (Soma * 10) % 11;\r\n\r\n  if ((Resto == 10) || (Resto == 11))  Resto = 0;\r\n  if (Resto != parseInt(strCPF.substring(9, 10)) ) return false;\r\n\r\nSoma = 0;\r\n  for (let i = 1; i <= 10; i++) {\r\n    Soma = Soma + parseInt(strCPF.substring(i-1, i)) * (12 - i)\r\n  };\r\n  Resto = (Soma * 10) % 11;\r\n\r\n  if ((Resto == 10) || (Resto == 11))  Resto = 0;\r\n  if (Resto != parseInt(strCPF.substring(10, 11) ) ) return false;\r\n  return true; //strCPF.replace(/(\\d{3})(\\d{3})(\\d{3})(\\d{2})/, \"$1.$2.$3-$4\");\r\n}"]},"metadata":{},"sourceType":"module"}