{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\Maou\\\\Documents\\\\Projetos\\\\CLIENTES\\\\RNF\\\\client\\\\src\\\\components\\\\List\\\\datagrid.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { DataGrid, RowsProp, ColDef } from '@material-ui/data-grid';\nimport { setDialog, setProducts } from \"../../actions/productActions\";\nimport { setCart } from \"../../actions/cartAction\";\nimport { setSnackbar } from \"../../actions/appActions\";\nimport { DEFAULT_LOCALE_TEXT } from \"../../providers/langs/datagrid\";\n\nvar LDataGrid = function (_Component) {\n  _inherits(LDataGrid, _Component);\n\n  var _super = _createSuper(LDataGrid);\n\n  function LDataGrid() {\n    var _this;\n\n    _classCallCheck(this, LDataGrid);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      data: []\n    };\n    return _this;\n  }\n\n  _createClass(LDataGrid, [{\n    key: \"setPage\",\n    value: function setPage() {\n      var params,\n          data,\n          _args = arguments;\n      return _regeneratorRuntime.async(function setPage$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              params = _args.length > 0 && _args[0] !== undefined ? _args[0] : {\n                page: 1\n              };\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(this.props.pageRequest(params));\n\n            case 3:\n              data = _context.sent;\n              this.setState(_objectSpread(_objectSpread({}, this.state), {}, {\n                data: data\n              }));\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      return _regeneratorRuntime.async(function componentDidMount$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              this.setPage();\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state$data$data,\n          _this$state$data$tota,\n          _this2 = this;\n\n      return React.createElement(\"div\", {\n        style: {\n          height: 300,\n          width: '100%'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 13\n        }\n      }, React.createElement(DataGrid, {\n        rows: (_this$state$data$data = this.state.data.data) != null ? _this$state$data$data : [],\n        columns: this.props.columns,\n        disableClickEventBubbling: true,\n        localeText: DEFAULT_LOCALE_TEXT,\n        paginationMode: \"server\",\n        rowCount: (_this$state$data$tota = this.state.data.total) != null ? _this$state$data$tota : 0,\n        pageSize: 10,\n        rowsPerPageOptions: [10, 20, 50],\n        pagination: true,\n        onPageChange: function onPageChange(params) {\n          _this2.setPage({\n            page: params.page\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 17\n        }\n      }));\n    }\n  }]);\n\n  return LDataGrid;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(store) {\n  return {};\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    setProducts: setProducts,\n    setSnackbar: setSnackbar,\n    setDialog: setDialog,\n    setCart: setCart\n  }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LDataGrid);","map":{"version":3,"sources":["C:/Users/Maou/Documents/Projetos/CLIENTES/RNF/client/src/components/List/datagrid.js"],"names":["React","Component","Fragment","connect","bindActionCreators","DataGrid","RowsProp","ColDef","setDialog","setProducts","setCart","setSnackbar","DEFAULT_LOCALE_TEXT","LDataGrid","state","data","params","page","props","pageRequest","setState","setPage","height","width","columns","total","mapStateToProps","store","mapDispatchToProps","dispatch"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,kBAAT,QAAmC,OAAnC;AAEA,SAASC,QAAT,EAAmBC,QAAnB,EAA6BC,MAA7B,QAA2C,wBAA3C;AAEA,SAASC,SAAT,EAAoBC,WAApB;AACA,SAASC,OAAT;AACA,SAASC,WAAT;AACA,SAASC,mBAAT;;IAEMC,S;;;;;;;;;;;;;;;UACFC,K,GAAQ;AACJC,MAAAA,IAAI,EAAE;AADF,K;;;;;;WAGR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAcC,cAAAA,MAAd,2DAAuB;AAAEC,gBAAAA,IAAI,EAAE;AAAR,eAAvB;AAAA;AAAA,+CACuB,KAAKC,KAAL,CAAWC,WAAX,CAAuBH,MAAvB,CADvB;;AAAA;AACUD,cAAAA,IADV;AAEI,mBAAKK,QAAL,iCAAmB,KAAKN,KAAxB;AAA+BC,gBAAAA,IAAI,EAAJA;AAA/B;;AAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;WAIA;AAAA;AAAA;AAAA;AAAA;AACI,mBAAKM,OAAL;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;WAIA,kBAAS;AAAA;AAAA;AAAA;;AACL,aACI;AAAK,QAAA,KAAK,EAAE;AAAEC,UAAAA,MAAM,EAAE,GAAV;AAAeC,UAAAA,KAAK,EAAE;AAAtB,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,QAAD;AAAU,QAAA,IAAI,2BAAE,KAAKT,KAAL,CAAWC,IAAX,CAAgBA,IAAlB,oCAA0B,EAAxC;AAA4C,QAAA,OAAO,EAAE,KAAKG,KAAL,CAAWM,OAAhE;AACI,QAAA,yBAAyB,MAD7B;AAEI,QAAA,UAAU,EAAEZ,mBAFhB;AAGI,QAAA,cAAc,EAAC,QAHnB;AAII,QAAA,QAAQ,2BAAE,KAAKE,KAAL,CAAWC,IAAX,CAAgBU,KAAlB,oCAA2B,CAJvC;AAKI,QAAA,QAAQ,EAAE,EALd;AAKkB,QAAA,kBAAkB,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,CALtC;AAKoD,QAAA,UAAU,MAL9D;AAMI,QAAA,YAAY,EAAE,sBAACT,MAAD,EAAY;AACtB,UAAA,MAAI,CAACK,OAAL,CAAa;AAAEJ,YAAAA,IAAI,EAAED,MAAM,CAACC;AAAf,WAAb;AACH,SARL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ;AAcH;;;;EA3BmBhB,S;;AA6BxB,IAAMyB,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK;AAAA,SAAK,EAAL;AAAA,CAA7B;;AAGA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,QAAQ;AAAA,SAC/BzB,kBAAkB,CAAC;AAAEK,IAAAA,WAAW,EAAXA,WAAF;AAAeE,IAAAA,WAAW,EAAXA,WAAf;AAA4BH,IAAAA,SAAS,EAATA,SAA5B;AAAuCE,IAAAA,OAAO,EAAPA;AAAvC,GAAD,EAAmDmB,QAAnD,CADa;AAAA,CAAnC;;AAGA,eAAe1B,OAAO,CAACuB,eAAD,EAAkBE,kBAAlB,CAAP,CAA6Cf,SAA7C,CAAf","sourcesContent":["import React, { Component, Fragment } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { bindActionCreators } from 'redux';\r\n//\r\nimport { DataGrid, RowsProp, ColDef } from '@material-ui/data-grid';\r\n//\r\nimport { setDialog, setProducts } from '../../actions/productActions'\r\nimport { setCart } from '../../actions/cartAction'\r\nimport { setSnackbar } from '../../actions/appActions'\r\nimport { DEFAULT_LOCALE_TEXT } from '../../providers/langs/datagrid'\r\n//const classes = useStyles();\r\nclass LDataGrid extends Component {\r\n    state = {\r\n        data: [],\r\n    }\r\n    async setPage(params = { page: 1 }) {\r\n        const data = await this.props.pageRequest(params);\r\n        this.setState({ ...this.state, data })\r\n    }\r\n    async componentDidMount() {\r\n        this.setPage();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{ height: 300, width: '100%' }}>\r\n                <DataGrid rows={this.state.data.data ?? []} columns={this.props.columns}\r\n                    disableClickEventBubbling\r\n                    localeText={DEFAULT_LOCALE_TEXT}\r\n                    paginationMode=\"server\"\r\n                    rowCount={this.state.data.total ?? 0}\r\n                    pageSize={10} rowsPerPageOptions={[10, 20, 50]} pagination\r\n                    onPageChange={(params) => {\r\n                        this.setPage({ page: params.page });\r\n                    }}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = store => ({\r\n\r\n});\r\nconst mapDispatchToProps = dispatch =>\r\n    bindActionCreators({ setProducts, setSnackbar, setDialog, setCart }, dispatch);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LDataGrid)\r\n"]},"metadata":{},"sourceType":"module"}