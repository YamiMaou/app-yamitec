{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Maou\\\\Documents\\\\Projetos\\\\CLIENTES\\\\RNF\\\\Completo\\\\client\\\\src\\\\components\\\\List\\\\datagrid.js\",\n    _this = this;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component, Fragment, useState, useRef } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { DataGrid, RowsProp, ColDef } from '@material-ui/data-grid';\nimport { setSnackbar } from \"../../actions/appActions\";\nimport { DEFAULT_LOCALE_TEXT } from \"../../providers/langs/datagrid\";\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport IconButton from '@material-ui/core/IconButton';\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport SearchIcon from '@material-ui/icons/Search';\nimport ReorderIcon from '@material-ui/icons/Reorder';\nimport ptBR from \"date-fns/locale/pt-BR\";\nimport Grid from '@material-ui/core/Grid';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { MuiPickersUtilsProvider, KeyboardTimePicker, KeyboardDatePicker } from '@material-ui/pickers';\nimport PropTypes from 'prop-types';\nimport MaskedInput from 'react-text-mask';\nimport { validaCpf } from \"../../providers/commonMethods\";\nvar idNumbers = ['cpf', 'cnpj'];\n\nfunction TextMaskCustom(props) {\n  var inputRef = props.inputRef,\n      other = _objectWithoutProperties(props, [\"inputRef\"]);\n\n  return React.createElement(MaskedInput, _extends({}, other, {\n    ref: function ref(_ref) {\n      inputRef(_ref ? _ref.inputElement : null);\n    },\n    value: props.value,\n    mask: props.mask,\n    placeholderChar: \"\\u2000\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }));\n}\n\nvar DateInput = function DateInput(props) {\n  var _props$label;\n\n  var _useState = useState(new Date('2021-02-13')),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  function handleChange(value) {\n    var e = {\n      target: {\n        id: props.id,\n        value: \"\" + value.toJSON().split('T')[0]\n      }\n    };\n\n    try {\n      props.onChange(e);\n    } catch (err) {\n      console.log(err);\n    }\n\n    setValue(value);\n  }\n\n  return React.createElement(MuiPickersUtilsProvider, {\n    utils: DateFnsUtils,\n    locale: ptBR,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }, React.createElement(Grid, {\n    justify: \"space-around\",\n    style: {\n      flexGrow: 0,\n      marginTop: 18\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, React.createElement(KeyboardDatePicker, {\n    margin: \"normal\",\n    id: props.id,\n    value: props.value,\n    label: (_props$label = props.label) != null ? _props$label : 'Data',\n    format: \"dd/MM/yyyy\",\n    value: value,\n    onChange: handleChange,\n    onBlur: handleChange,\n    KeyboardButtonProps: {\n      'aria-label': 'change date'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  })));\n};\n\nvar SelectInput = function SelectInput(props) {\n  var _useState3 = useState(props.values[0]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      value = _useState4[0],\n      setValue = _useState4[1];\n\n  function handleChange(e) {\n    props.onBlur(e);\n    setValue(e.target.value);\n  }\n\n  return React.createElement(FormControl, {\n    id: props.column,\n    style: _objectSpread(_objectSpread({}, props.style), {}, {\n      marginTop: '25px'\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }, React.createElement(InputLabel, {\n    id: props.column,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }\n  }, props.label), React.createElement(Select, {\n    labelId: props.id,\n    id: props.id,\n    name: props.name,\n    value: props.value,\n    onChange: handleChange,\n    onBlur: handleChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }\n  }, props.values.map(function (val) {\n    return React.createElement(MenuItem, {\n      value: val,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 32\n      }\n    }, val);\n  })));\n};\n\nvar StyledDataGrid = withStyles({\n  window: {\n    overflowX: 'hidden'\n  }\n})(DataGrid);\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      \"& div.react-grid-Container\": {\n        color: \"red\"\n      }\n    }\n  };\n});\n\nvar LDataGrid = function (_Component) {\n  _inherits(LDataGrid, _Component);\n\n  var _super = _createSuper(LDataGrid);\n\n  function LDataGrid() {\n    var _this2;\n\n    _classCallCheck(this, LDataGrid);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this2 = _super.call.apply(_super, [this].concat(args));\n    _this2.state = {\n      data: [],\n      filters: {},\n      filter: 'flex',\n      loading: true,\n      firstLoad: true\n    };\n    return _this2;\n  }\n\n  _createClass(LDataGrid, [{\n    key: \"setPage\",\n    value: function setPage() {\n      var params,\n          cleanfilters,\n          query,\n          data,\n          _args = arguments;\n      return _regeneratorRuntime.async(function setPage$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              params = _args.length > 0 && _args[0] !== undefined ? _args[0] : {\n                page: 1\n              };\n              this.setState(_objectSpread(_objectSpread({}, this.state), {}, {\n                loading: true\n              }));\n              cleanfilters = {};\n              Object.entries(params).map(function (item) {\n                if (item[1].length >= 1) {\n                  if (item[1] !== \"Todos\") {\n                    cleanfilters[item[0]] = item[1];\n                    console.log(item);\n                  }\n                }\n              });\n              query = _extends({\n                queryType: 'like',\n                withId: \"name\"\n              }, cleanfilters);\n              console.log(query);\n              _context.next = 8;\n              return _regeneratorRuntime.awrap(this.props.pageRequest(query));\n\n            case 8:\n              data = _context.sent;\n\n              if (data !== undefined) {\n                this.setState(_objectSpread(_objectSpread({}, this.state), {}, {\n                  data: data,\n                  loading: false\n                }));\n              }\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var filters;\n      return _regeneratorRuntime.async(function componentDidMount$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              filters = {};\n              this.props.filterInputs.map(function (input) {\n                var _input$value;\n\n                filters[input.column] = (_input$value = input.value) != null ? _input$value : \"\";\n              });\n              this.setState(_objectSpread(_objectSpread({}, this.state), {}, {\n                filters: filters\n              }));\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this,\n          _this$state$data$data,\n          _this$state$data$tota;\n\n      var classes = {\n        m5: {\n          margin: 5,\n          marginTop: 25\n        },\n        root: {\n          maxWidth: 345,\n          marginBottom: 25\n        },\n        media: {\n          height: 140\n        }\n      };\n      var filters = this.state.filters;\n\n      var onChangeInputs = function onChangeInputs(e) {\n        var value = e.target.value;\n\n        if (idNumbers.includes(e.target.id)) {\n          value = value.replace(/[^\\d]+/g, '');\n        }\n\n        if (value.length == 0) {\n          var _e$target$id;\n\n          delete filters[(_e$target$id = e.target.id) != null ? _e$target$id : e.target.name];\n        } else {\n          var _e$target$id2;\n\n          if (e.target.id == 'created_at') {\n            value = \"\" + value.toJSON().split('T')[0];\n          }\n\n          if (e.target.id == 'nome') {}\n\n          if (idNumbers.includes(e.target.id)) {\n            value = value.replace(/[^\\d]+/g, '');\n          }\n\n          filters[(_e$target$id2 = e.target.id) != null ? _e$target$id2 : e.target.name] = value;\n\n          _this3.setState(_objectSpread(_objectSpread({}, _this3.state), {}, {\n            filters: filters\n          }));\n        }\n      };\n\n      var onClearFilter = function onClearFilter() {\n        var filters = {};\n\n        _this3.props.filterInputs.map(function (input) {\n          var _input$value2;\n\n          filters[input.column] = (_input$value2 = input.value) != null ? _input$value2 : \"\";\n        });\n\n        _this3.setState(_objectSpread(_objectSpread({}, _this3.state), {}, {\n          filters: filters\n        }));\n      };\n\n      var rows = (_this$state$data$data = this.state.data.data) != null ? _this$state$data$data : [];\n      var columns = this.props.columns;\n      return React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 13\n        }\n      }, React.createElement(Card, {\n        className: classes.root,\n        style: {\n          marginBottom: 15\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 17\n        }\n      }, React.createElement(CardContent, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 21\n        }\n      }, React.createElement(Typography, {\n        onClick: function onClick() {\n          _this3.setState(_objectSpread(_objectSpread({}, _this3.state), {}, {\n            filter: _this3.state.filter == 'none' ? 'flex' : 'none'\n          }));\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 25\n        }\n      }, React.createElement(FilterListIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 29\n        }\n      }), \" Filtros\"), React.createElement(\"div\", {\n        id: \"filter-form\",\n        style: {\n          alignItems: 'center',\n          flexFlow: 'row wrap',\n          justifyContent: 'space-around',\n          display: this.state.filter\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 25\n        }\n      }, this.props.filterInputs.map(function (input) {\n        if (input.type == \"text\") {\n          var _input$grow, _input$flexBasis, _input$grow2, _this3$state$filters$, _this3$state$filters$2;\n\n          if (input.mask === undefined) return React.createElement(TextField, {\n            style: _objectSpread(_objectSpread({}, classes.m5), {}, {\n              flexGrow: (_input$grow = input.grow) != null ? _input$grow : 0,\n              flexBasis: (_input$flexBasis = input.flexBasis) != null ? _input$flexBasis : '30%'\n            }),\n            id: input.column,\n            label: input.label,\n            onChange: onChangeInputs,\n            onBlur: onChangeInputs,\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 255,\n              columnNumber: 52\n            }\n          });else return React.createElement(FormControl, {\n            style: _objectSpread(_objectSpread({}, classes.m5), {}, {\n              flexGrow: (_input$grow2 = input.grow) != null ? _input$grow2 : 0\n            }),\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 49\n            }\n          }, React.createElement(InputLabel, {\n            htmlFor: \"formatted-text-mask-input\",\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 53\n            }\n          }, input.label), React.createElement(Input, {\n            value: (_this3$state$filters$ = _this3.state.filters[input.column]) != null ? _this3$state$filters$ : \"\",\n            onChange: onChangeInputs,\n            onFocus: function onFocus(e) {\n              if (e.target.value.length == 0) {\n                e.target.setSelectionRange(0, e.target.value.length);\n              }\n            },\n            name: input.column,\n            id: input.column,\n            value: (_this3$state$filters$2 = _this3.state.filters[input.column]) != null ? _this3$state$filters$2 : \"\",\n            inputProps: {\n              mask: input.mask\n            },\n            inputComponent: TextMaskCustom,\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 53\n            }\n          }));\n        } else if (input.type == \"date\") {\n          var _input$grow3;\n\n          return React.createElement(DateInput, {\n            id: input.column,\n            style: _objectSpread(_objectSpread({}, classes.m5), {}, {\n              flexGrow: (_input$grow3 = input.grow) != null ? _input$grow3 : 0\n            }),\n            onBlur: onChangeInputs,\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 280,\n              columnNumber: 48\n            }\n          });\n        } else if (input.type == \"select\") {\n          var _this3$state$filters$3, _input$grow4;\n\n          return React.createElement(SelectInput, {\n            id: input.column,\n            label: input.label,\n            name: input.column,\n            value: (_this3$state$filters$3 = _this3.state.filters[input.column]) != null ? _this3$state$filters$3 : \"\",\n            values: input.values,\n            style: _objectSpread(_objectSpread({}, classes.m5), {}, {\n              flexGrow: (_input$grow4 = input.grow) != null ? _input$grow4 : 0\n            }),\n            onBlur: onChangeInputs,\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 282,\n              columnNumber: 49\n            }\n          });\n        }\n      }), React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 29\n        }\n      }, React.createElement(Button, {\n        size: \"small\",\n        style: {\n          margin: 5\n        },\n        startIcon: React.createElement(SearchIcon, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 87\n          }\n        }),\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: function onClick() {\n          _this3.setPage(_this3.state.filters);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 33\n        }\n      }, \" Pesquisar\"), React.createElement(Button, {\n        size: \"small\",\n        style: {\n          margin: 5\n        },\n        startIcon: React.createElement(ReorderIcon, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 87\n          }\n        }),\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: function onClick() {\n          onClearFilter();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 33\n        }\n      }, \" Limpar\"))))), React.createElement(Card, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 17\n        }\n      }, React.createElement(CardContent, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 21\n        }\n      }, !this.state.firstLoad && React.createElement(\"div\", {\n        style: {\n          height: 450,\n          width: '100%'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 25\n        }\n      }, React.createElement(StyledDataGrid, {\n        rows: rows,\n        columns: columns,\n        columnBuffer: 4,\n        disableClickEventBubbling: true,\n        disableColumnMenu: true,\n        loading: this.state.loading,\n        localeText: DEFAULT_LOCALE_TEXT,\n        paginationMode: \"server\",\n        rowCount: (_this$state$data$tota = this.state.data.total) != null ? _this$state$data$tota : 0,\n        pageSize: 10,\n        rowsPerPageOptions: [10],\n        pagination: true,\n        onPageChange: function onPageChange(params) {\n          console.log(\"CARREGOU\");\n\n          _this3.setPage({\n            page: params.page,\n            pageSize: params.pageSize\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 29\n        }\n      }))), React.createElement(CardActionArea, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 21\n        }\n      }), React.createElement(CardActions, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 21\n        }\n      })));\n    }\n  }]);\n\n  return LDataGrid;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(store) {\n  return {};\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    setSnackbar: setSnackbar\n  }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LDataGrid);","map":{"version":3,"sources":["C:/Users/Maou/Documents/Projetos/CLIENTES/RNF/Completo/client/src/components/List/datagrid.js"],"names":["React","Component","Fragment","useState","useRef","connect","bindActionCreators","DataGrid","RowsProp","ColDef","setSnackbar","DEFAULT_LOCALE_TEXT","makeStyles","withStyles","Card","CardActionArea","CardActions","CardContent","CardMedia","Button","Typography","TextField","Input","InputLabel","MenuItem","FormHelperText","FormControl","Select","IconButton","FilterListIcon","SearchIcon","ReorderIcon","ptBR","Grid","DateFnsUtils","MuiPickersUtilsProvider","KeyboardTimePicker","KeyboardDatePicker","PropTypes","MaskedInput","validaCpf","idNumbers","TextMaskCustom","props","inputRef","other","ref","inputElement","value","mask","DateInput","Date","setValue","handleChange","e","target","id","toJSON","split","onChange","err","console","log","flexGrow","marginTop","label","SelectInput","values","onBlur","column","style","name","map","val","StyledDataGrid","window","overflowX","useStyles","theme","root","color","LDataGrid","state","data","filters","filter","loading","firstLoad","params","page","setState","cleanfilters","Object","entries","item","length","query","queryType","withId","pageRequest","undefined","filterInputs","input","classes","m5","margin","maxWidth","marginBottom","media","height","onChangeInputs","includes","replace","onClearFilter","rows","columns","alignItems","flexFlow","justifyContent","display","type","grow","flexBasis","setSelectionRange","setPage","width","total","pageSize","mapStateToProps","store","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component, Fragment, useState, useRef } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { bindActionCreators } from 'redux';\r\n//\r\nimport { DataGrid, RowsProp, ColDef } from '@material-ui/data-grid';\r\n//\r\nimport { setSnackbar } from '../../actions/appActions'\r\nimport { DEFAULT_LOCALE_TEXT } from '../../providers/langs/datagrid'\r\n//const classes = useStyles();\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n//\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Input from '@material-ui/core/Input';\r\n\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport FilterListIcon from '@material-ui/icons/FilterList';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport ReorderIcon from '@material-ui/icons/Reorder';\r\n\r\nimport ptBR from \"date-fns/locale/pt-BR\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport {\r\n    MuiPickersUtilsProvider,\r\n    KeyboardTimePicker,\r\n    KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\n\r\nimport PropTypes from 'prop-types';\r\nimport MaskedInput from 'react-text-mask';\r\n\r\n// VALIDATORS\r\n\r\nimport { validaCpf } from '../../providers/commonMethods'\r\n//\r\n\r\n//const [valus, setValues] = useState(new Date('2021-02-13'));\r\nconst idNumbers = [\r\n    'cpf', 'cnpj'\r\n];\r\n// MASKED INPUTS \r\n\r\nfunction TextMaskCustom(props) {\r\n    const { inputRef, ...other } = props;\r\n\r\n    return (\r\n        <MaskedInput\r\n            {...other}\r\n            ref={(ref) => {\r\n                inputRef(ref ? ref.inputElement : null);\r\n            }}\r\n            value={props.value}\r\n            mask={props.mask}\r\n            placeholderChar={'\\u2000'}\r\n\r\n        />\r\n    );\r\n}\r\n\r\n\r\n//\r\nconst DateInput = (props) => {\r\n    const [value, setValue] = useState(new Date('2021-02-13'));\r\n    function handleChange(value) {\r\n        let e = {target: {id:props.id , value: `${value.toJSON().split('T')[0]}`}}\r\n        try {\r\n            //inputValues[props.id] = `${value.toJSON().split('T')[0]}`\r\n            props.onChange(e)\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n        setValue(value);\r\n    }\r\n    return (<MuiPickersUtilsProvider utils={DateFnsUtils} locale={ptBR}>\r\n        <Grid justify=\"space-around\" style={{ flexGrow: 0, marginTop: 18 }}>\r\n            <KeyboardDatePicker\r\n                margin=\"normal\"\r\n                id={props.id}\r\n                value={props.value}\r\n                label={props.label ?? 'Data'}\r\n                format=\"dd/MM/yyyy\"\r\n                value={value}\r\n                onChange={handleChange}\r\n                onBlur={handleChange}\r\n                KeyboardButtonProps={{\r\n                    'aria-label': 'change date',\r\n                }}\r\n            />\r\n        </Grid>\r\n    </MuiPickersUtilsProvider>)\r\n}\r\n//\r\n\r\nconst SelectInput = (props) => {\r\n    const [value, setValue] = useState(props.values[0]);\r\n    function handleChange(e) {\r\n        props.onBlur(e)\r\n        setValue(e.target.value);\r\n    }\r\n    return (\r\n        <FormControl id={props.column} style={{ ...props.style, marginTop: '25px' }}>\r\n            <InputLabel id={props.column}>{props.label}</InputLabel>\r\n            <Select\r\n                labelId={props.id}\r\n                id={props.id}\r\n                name={props.name}\r\n                value={props.value}\r\n                onChange={handleChange}\r\n                onBlur={handleChange}\r\n            >\r\n                {\r\n                    props.values.map(val => {\r\n                        return <MenuItem value={val}>{val}</MenuItem>\r\n                    })\r\n                }\r\n\r\n            </Select>\r\n        </FormControl>)\r\n}\r\nconst StyledDataGrid = withStyles({\r\n    window:  {\r\n          overflowX: 'hidden'\r\n      }\r\n  })(DataGrid);\r\n  const useStyles = makeStyles(theme => ({\r\n    root: {\r\n      \"& div.react-grid-Container\": {\r\n        color: \"red\",\r\n        // color: theme.palette.text.color\r\n      }\r\n    }\r\n  }));\r\nclass LDataGrid extends Component {\r\n    state = {\r\n        data: [],\r\n        filters: {},\r\n        filter: 'flex',\r\n        loading: true,\r\n        firstLoad: true\r\n    }\r\n    async setPage(params = { page: 1 }) {\r\n        this.setState({ ...this.state, loading: true })\r\n        let cleanfilters = {};\r\n        Object.entries(params).map((item) => { \r\n            if(item[1].length >= 1 ){\r\n                if(item[1] !== \"Todos\"){\r\n                    cleanfilters[item[0]] = item[1];\r\n                    console.log(item);\r\n                }\r\n            }\r\n            \r\n        });\r\n        let query = Object.assign({queryType : 'like', withId: \"name\"}, cleanfilters);\r\n        console.log(query);\r\n        const data = await this.props.pageRequest(query);\r\n        if (data !== undefined) {\r\n            this.setState({ ...this.state, data, loading: false })\r\n        }\r\n\r\n    }\r\n    async componentDidMount() {\r\n        //this.setPage();\r\n        let filters = {};\r\n        this.props.filterInputs.map(input => { \r\n            filters[input.column] = input.value ?? \"\";\r\n        });\r\n\r\n        this.setState({...this.state, filters});\r\n\r\n    }\r\n\r\n    render() {\r\n        const classes = {\r\n            m5: {\r\n                margin: 5,\r\n                marginTop: 25,\r\n                //flexBasis: '30%'\r\n\r\n            },\r\n            root: {\r\n                maxWidth: 345,\r\n                marginBottom: 25\r\n            },\r\n            media: {\r\n                height: 140,\r\n            },\r\n        }\r\n        let filters = this.state.filters;\r\n        const onChangeInputs = (e) => {\r\n            let value = e.target.value;\r\n            if (idNumbers.includes(e.target.id)) {\r\n                value = value.replace(/[^\\d]+/g, '');\r\n            }\r\n            if (value.length == 0 ) {\r\n                delete filters[e.target.id ?? e.target.name];\r\n            } else {\r\n                if (e.target.id == 'created_at') {\r\n                    value = `${value.toJSON().split('T')[0]}`\r\n                }\r\n                if (e.target.id == 'nome') {\r\n                    //filters[\"withId\"] = \"name\"\r\n                }\r\n                if (idNumbers.includes(e.target.id)) {\r\n                    value = value.replace(/[^\\d]+/g, '');\r\n                }\r\n                filters[e.target.id ?? e.target.name] = value\r\n                this.setState({...this.state, filters});\r\n            }\r\n        }\r\n\r\n        const onClearFilter = () => {\r\n            let filters = {};\r\n            this.props.filterInputs.map(input => { \r\n                filters[input.column] = input.value ?? \"\";\r\n            });\r\n\r\n            this.setState({...this.state, filters});\r\n        }\r\n        const rows: RowsProp = this.state.data.data ?? [];\r\n          \r\n        const columns: ColDef[] = this.props.columns;\r\n        return (\r\n            <div>\r\n                <Card className={classes.root} style={{ marginBottom: 15 }}>\r\n                    <CardContent>\r\n                        <Typography onClick={() => {\r\n                            this.setState({ ...this.state, filter: this.state.filter == 'none' ? 'flex' : 'none' })\r\n                        }}>\r\n                            <FilterListIcon /> Filtros\r\n                    </Typography>\r\n\r\n                        <div id=\"filter-form\" style={{\r\n                            alignItems: 'center',\r\n                            flexFlow: 'row wrap',\r\n                            justifyContent: 'space-around',\r\n                            display: this.state.filter,\r\n                        }}>\r\n                            {\r\n                                this.props.filterInputs.map(input => {\r\n                                    if (input.type == \"text\") {\r\n                                        if (input.mask === undefined)\r\n                                            return <TextField style={{ ...classes.m5, flexGrow: input.grow ?? 0, flexBasis: input.flexBasis ?? '30%' }} id={input.column} label={input.label} onChange={onChangeInputs} onBlur={onChangeInputs} />\r\n                                        else\r\n                                            return (\r\n                                                <FormControl style={{ ...classes.m5, flexGrow: input.grow ?? 0 }} >\r\n                                                    <InputLabel htmlFor=\"formatted-text-mask-input\">{input.label}</InputLabel>\r\n                                                    <Input\r\n                                                        value={this.state.filters[input.column] ?? \"\"}\r\n                                                        onChange={onChangeInputs}\r\n                                                        onFocus={(e) => {\r\n                                                            if (e.target.value.length == 0) {\r\n                                                                //alert(e.target.value);\r\n                                                                e.target.setSelectionRange(0, e.target.value.length)\r\n                                                            }\r\n                                                        }}\r\n                                                        name={input.column}\r\n                                                        id={input.column}\r\n                                                        value={this.state.filters[input.column] ?? \"\"}\r\n                                                        inputProps={{\r\n                                                            mask: input.mask\r\n                                                        }}\r\n                                                        inputComponent={TextMaskCustom}\r\n                                                    />\r\n                                                </FormControl>)\r\n\r\n                                    } else if (input.type == \"date\") {\r\n                                        return <DateInput id={input.column} style={{ ...classes.m5, flexGrow: input.grow ?? 0 }} onBlur={onChangeInputs} />\r\n                                    } else if (input.type == \"select\") {\r\n                                        return (<SelectInput id={input.column} label={input.label} name={input.column} value={this.state.filters[input.column] ?? \"\"} values={input.values} style={{ ...classes.m5, flexGrow: input.grow ?? 0 }} onBlur={onChangeInputs} />)\r\n                                    }\r\n                                })\r\n                            }\r\n                            <div>\r\n                                <Button size=\"small\" style={{ margin: 5 }} startIcon={<SearchIcon />} variant=\"contained\" color=\"primary\" onClick={() => { this.setPage(this.state.filters) }}> Pesquisar</Button>\r\n                                <Button size=\"small\" style={{ margin: 5 }} startIcon={<ReorderIcon />} variant=\"contained\" color=\"primary\" onClick={() => {onClearFilter()}} > Limpar</Button>\r\n                            </div>\r\n                        </div>\r\n                    </CardContent>\r\n                </Card>\r\n\r\n                <Card>\r\n                    <CardContent>\r\n                        {!this.state.firstLoad &&\r\n                        <div style={{ height: 450, width: '100%' }}>\r\n                            <StyledDataGrid rows={rows} columns={columns}\r\n                                columnBuffer={4}\r\n                                disableClickEventBubbling\r\n                                disableColumnMenu={true}\r\n                                loading={this.state.loading}\r\n                                localeText={DEFAULT_LOCALE_TEXT}\r\n                                paginationMode=\"server\"\r\n                                rowCount={this.state.data.total ?? 0}\r\n                                pageSize={10} rowsPerPageOptions={[10]} pagination\r\n                                /*onPageSizeChange={(params) => {\r\n                                    this.setPage({ page: params.page, pageSize: params.pageSize });\r\n                                }}*/\r\n                                onPageChange={(params) => {\r\n                                    console.log(\"CARREGOU\");\r\n                                    this.setPage({ page: params.page, pageSize: params.pageSize });\r\n                                }}\r\n                            />\r\n                        </div> }\r\n                    </CardContent>\r\n                    <CardActionArea>\r\n                    </CardActionArea>\r\n                    <CardActions>\r\n\r\n                    </CardActions>\r\n                </Card>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = store => ({\r\n\r\n});\r\nconst mapDispatchToProps = dispatch =>\r\n    bindActionCreators({setSnackbar}, dispatch);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LDataGrid)\r\n"]},"metadata":{},"sourceType":"module"}