{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Maou\\\\Documents\\\\Projetos\\\\CLIENTES\\\\RNF\\\\client\\\\src\\\\components\\\\List\\\\datagrid.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component, Fragment, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { DataGrid, RowsProp, ColDef } from '@material-ui/data-grid';\nimport { setDialog, setProducts } from \"../../actions/productActions\";\nimport { setCart } from \"../../actions/cartAction\";\nimport { setSnackbar } from \"../../actions/appActions\";\nimport { DEFAULT_LOCALE_TEXT } from \"../../providers/langs/datagrid\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport ptBR from \"date-fns/locale/pt-BR\";\nimport Grid from '@material-ui/core/Grid';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { MuiPickersUtilsProvider, KeyboardTimePicker, KeyboardDatePicker } from '@material-ui/pickers';\nvar inputValues = {};\n\nfunction onChangeInputs(e) {\n  inputValues[e.target.id] = e.target.value;\n  console.log(inputValues);\n}\n\nvar DateInput = function DateInput(props) {\n  var _props$label;\n\n  var _useState = useState(new Date('2021-02-13')),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  function handleChange(value) {\n    inputValues[props.id] = value.toISOString().split('T')[0];\n    setValue(value);\n  }\n\n  return React.createElement(MuiPickersUtilsProvider, {\n    utils: DateFnsUtils,\n    locale: ptBR,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }, React.createElement(Grid, {\n    justify: \"space-around\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 17\n    }\n  }, React.createElement(KeyboardDatePicker, {\n    margin: \"normal\",\n    id: \"date-picker-dialog\",\n    label: (_props$label = props.label) != null ? _props$label : 'Data',\n    format: \"dd/MM/yyyy\",\n    value: value,\n    onChange: handleChange,\n    onBlur: onChangeInputs,\n    KeyboardButtonProps: {\n      'aria-label': 'change date'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }\n  })));\n};\n\nvar LDataGrid = function (_Component) {\n  _inherits(LDataGrid, _Component);\n\n  var _super = _createSuper(LDataGrid);\n\n  function LDataGrid() {\n    var _this2;\n\n    _classCallCheck(this, LDataGrid);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this2 = _super.call.apply(_super, [this].concat(args));\n    _this2.state = {\n      data: []\n    };\n    return _this2;\n  }\n\n  _createClass(LDataGrid, [{\n    key: \"setPage\",\n    value: function setPage() {\n      var params,\n          data,\n          _args = arguments;\n      return _regeneratorRuntime.async(function setPage$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              params = _args.length > 0 && _args[0] !== undefined ? _args[0] : {\n                page: 1\n              };\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(this.props.pageRequest(params));\n\n            case 3:\n              data = _context.sent;\n              this.setState(_objectSpread(_objectSpread({}, this.state), {}, {\n                data: data\n              }));\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      return _regeneratorRuntime.async(function componentDidMount$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              this.setPage();\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this,\n          _this$state$data$data,\n          _this$state$data$tota;\n\n      var classes = {\n        m5: {\n          margin: 5\n        },\n        root: {\n          maxWidth: 345\n        },\n        media: {\n          height: 140\n        }\n      };\n      return React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }\n      }, React.createElement(Card, {\n        className: classes.root,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 17\n        }\n      }, React.createElement(CardContent, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }\n      }, this.props.filterInputs.map(function (input) {\n        if (input.type == \"text\") {\n          return React.createElement(TextField, {\n            style: classes.m5,\n            id: input.column,\n            label: input.label,\n            onChange: onChangeInputs,\n            onBlur: onChangeInputs,\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 44\n            }\n          });\n        } else if (input.type == \"date\") {\n          return React.createElement(DateInput, {\n            id: input.column,\n            style: classes.m5,\n            onBlur: onChangeInputs,\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 44\n            }\n          });\n        } else if (input.type == \"select\") {\n          var _input$value;\n\n          return React.createElement(FormControl, {\n            style: classes.m5,\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 37\n            }\n          }, React.createElement(InputLabel, {\n            id: input.column,\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 41\n            }\n          }, input.label), React.createElement(Select, {\n            labelId: input.column,\n            id: input.column,\n            value: (_input$value = input.value) != null ? _input$value : '',\n            onChange: onChangeInputs,\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 41\n            }\n          }, input.values.map(function (val) {\n            return React.createElement(MenuItem, {\n              value: val,\n              __self: _this3,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 116,\n                columnNumber: 60\n              }\n            }, val);\n          })));\n        }\n      })), React.createElement(CardActionArea, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }\n      }), React.createElement(CardActions, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }\n      })), React.createElement(\"div\", {\n        style: {\n          height: window.innerHeight - 250,\n          width: '100%'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 17\n        }\n      }, React.createElement(DataGrid, {\n        rows: (_this$state$data$data = this.state.data.data) != null ? _this$state$data$data : [],\n        columns: this.props.columns,\n        disableClickEventBubbling: true,\n        localeText: DEFAULT_LOCALE_TEXT,\n        paginationMode: \"server\",\n        rowCount: (_this$state$data$tota = this.state.data.total) != null ? _this$state$data$tota : 0,\n        pageSize: 10,\n        rowsPerPageOptions: [10, 20, 50],\n        pagination: true,\n        onPageChange: function onPageChange(params) {\n          console.log(params);\n\n          _this3.setPage({\n            page: params.page,\n            pageSize: params.pageSize\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }\n      })));\n    }\n  }]);\n\n  return LDataGrid;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(store) {\n  return {};\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    setProducts: setProducts,\n    setSnackbar: setSnackbar,\n    setDialog: setDialog,\n    setCart: setCart\n  }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LDataGrid);","map":{"version":3,"sources":["C:/Users/Maou/Documents/Projetos/CLIENTES/RNF/client/src/components/List/datagrid.js"],"names":["React","Component","Fragment","useState","connect","bindActionCreators","DataGrid","RowsProp","ColDef","setDialog","setProducts","setCart","setSnackbar","DEFAULT_LOCALE_TEXT","makeStyles","Card","CardActionArea","CardActions","CardContent","CardMedia","Button","Typography","TextField","InputLabel","MenuItem","FormHelperText","FormControl","Select","ptBR","Grid","DateFnsUtils","MuiPickersUtilsProvider","KeyboardTimePicker","KeyboardDatePicker","inputValues","onChangeInputs","e","target","id","value","console","log","DateInput","props","Date","setValue","handleChange","toISOString","split","label","LDataGrid","state","data","params","page","pageRequest","setState","setPage","classes","m5","margin","root","maxWidth","media","height","filterInputs","map","input","type","column","values","val","window","innerHeight","width","columns","total","pageSize","mapStateToProps","store","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component, Fragment, useState } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { bindActionCreators } from 'redux';\r\n//\r\nimport { DataGrid, RowsProp, ColDef } from '@material-ui/data-grid';\r\n//\r\nimport { setDialog, setProducts } from '../../actions/productActions'\r\nimport { setCart } from '../../actions/cartAction'\r\nimport { setSnackbar } from '../../actions/appActions'\r\nimport { DEFAULT_LOCALE_TEXT } from '../../providers/langs/datagrid'\r\n//const classes = useStyles();\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n//\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nimport ptBR from \"date-fns/locale/pt-BR\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardTimePicker,\r\n  KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\n//\r\n\r\n//const [valus, setValues] = useState(new Date('2021-02-13'));\r\nlet inputValues = {};\r\nfunction onChangeInputs(e) {\r\n    inputValues[e.target.id] = e.target.value\r\n    console.log(inputValues)\r\n}\r\nconst DateInput = (props) => {\r\n    const [value, setValue] = useState(new Date('2021-02-13'));\r\n    function handleChange(value) {\r\n        inputValues[props.id] = value.toISOString().split('T')[0]\r\n        setValue(value);\r\n    }\r\n    return (<MuiPickersUtilsProvider utils={DateFnsUtils} locale={ptBR}>\r\n                <Grid justify=\"space-around\">\r\n                <KeyboardDatePicker\r\n                    margin=\"normal\"\r\n                    id=\"date-picker-dialog\"\r\n                    label={props.label ?? 'Data'}\r\n                    format=\"dd/MM/yyyy\"\r\n                    value={value}\r\n                    onChange={handleChange}\r\n                    onBlur={onChangeInputs}\r\n                    KeyboardButtonProps={{\r\n                        'aria-label': 'change date',\r\n                    }}\r\n                    />\r\n                </Grid>\r\n            </MuiPickersUtilsProvider>)\r\n}\r\n\r\nclass LDataGrid extends Component {\r\n    state = {\r\n        data: [],\r\n    }\r\n    async setPage(params = { page: 1 }) {\r\n        const data = await this.props.pageRequest(params);\r\n        this.setState({ ...this.state, data })\r\n    }\r\n    async componentDidMount() {\r\n        this.setPage();\r\n    }\r\n\r\n    render() {\r\n        const classes = {\r\n            m5: {\r\n                margin: 5,\r\n            },\r\n            root: {\r\n                maxWidth: 345,\r\n            },\r\n            media: {\r\n                height: 140,\r\n            },\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <Card className={classes.root}>\r\n                    <CardContent>\r\n                        {\r\n                            this.props.filterInputs.map(input => {\r\n                                if(input.type == \"text\") {\r\n                                    return <TextField style={classes.m5} id={input.column} label={input.label} onChange={onChangeInputs} onBlur={onChangeInputs} />\r\n                                }else if(input.type == \"date\") {\r\n                                    return <DateInput id={input.column} style={classes.m5} onBlur={onChangeInputs} />\r\n                                }else if(input.type == \"select\"){\r\n                                    return (\r\n                                    <FormControl style={classes.m5} >\r\n                                        <InputLabel id={input.column}>{input.label}</InputLabel>\r\n                                        <Select\r\n                                            labelId={input.column}\r\n                                            id={input.column}\r\n                                            value={input.value ?? ''}\r\n                                            onChange={onChangeInputs}\r\n                                        >\r\n                                            {\r\n                                                input.values.map(val => {\r\n                                                    return <MenuItem value={val}>{val}</MenuItem>\r\n                                                })\r\n                                            }\r\n                                            \r\n                                        </Select>\r\n                                    </FormControl>)\r\n                                }\r\n                            })\r\n                        }\r\n                    </CardContent>\r\n                    <CardActionArea>\r\n                    </CardActionArea>\r\n                    <CardActions>\r\n\r\n                    </CardActions>\r\n                </Card>\r\n\r\n                <div style={{ height: window.innerHeight - 250, width: '100%' }}>\r\n                    <DataGrid rows={this.state.data.data ?? []} columns={this.props.columns}\r\n                        disableClickEventBubbling\r\n                        localeText={DEFAULT_LOCALE_TEXT}\r\n                        paginationMode=\"server\"\r\n                        rowCount={this.state.data.total ?? 0}\r\n                        pageSize={10} rowsPerPageOptions={[10, 20, 50]} pagination\r\n                        onPageChange={(params) => {\r\n                            console.log(params);\r\n                            this.setPage({ page: params.page, pageSize: params.pageSize });\r\n                        }}\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = store => ({\r\n\r\n});\r\nconst mapDispatchToProps = dispatch =>\r\n    bindActionCreators({ setProducts, setSnackbar, setDialog, setCart }, dispatch);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LDataGrid)\r\n"]},"metadata":{},"sourceType":"module"}