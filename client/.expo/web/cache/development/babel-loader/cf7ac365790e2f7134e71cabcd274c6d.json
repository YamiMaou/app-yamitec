{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component, Fragment, useState, useRef } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { DataGrid, RowsProp, ColDef } from '@material-ui/data-grid';\nimport { setDialog, setProducts } from \"../../actions/productActions\";\nimport { setCart } from \"../../actions/cartAction\";\nimport { setSnackbar } from \"../../actions/appActions\";\nimport { DEFAULT_LOCALE_TEXT } from \"../../providers/langs/datagrid\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport ptBR from \"date-fns/locale/pt-BR\";\nimport Grid from '@material-ui/core/Grid';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { MuiPickersUtilsProvider, KeyboardTimePicker, KeyboardDatePicker } from '@material-ui/pickers';\nimport PropTypes from 'prop-types';\nimport MaskedInput from 'react-text-mask';\nvar idNumbers = ['cpf', 'cnpj'];\nvar inputValues = {};\n\nfunction onChangeInputs(e) {\n  var value = e.target.value;\n\n  if (idNumbers.includes(e.target.id)) {\n    value = value.replace(/[^\\d]+/g, '');\n  }\n\n  if (value.length == 0 || e.target.value == 'Todos') {\n    var _e$target$id;\n\n    delete inputValues[(_e$target$id = e.target.id) != null ? _e$target$id : e.target.name];\n  } else {\n    var _e$target$id2;\n\n    if (e.target.id == 'created_at') {\n      value = \"\" + value.toJSON().split('T')[0];\n    }\n\n    if (idNumbers.includes(e.target.id)) {\n      value = value.replace(/[^\\d]+/g, '');\n    }\n\n    inputValues[(_e$target$id2 = e.target.id) != null ? _e$target$id2 : e.target.name] = value;\n    console.log(inputValues);\n  }\n}\n\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      '& > *': {\n        margin: theme.spacing(1)\n      }\n    }\n  };\n});\n\nfunction TextMaskCustom(props) {\n  var inputRef = props.inputRef,\n      other = _objectWithoutProperties(props, [\"inputRef\"]);\n\n  return React.createElement(MaskedInput, _extends({}, other, {\n    ref: function ref(_ref) {\n      inputRef(_ref ? _ref.inputElement : null);\n    },\n    mask: props.mask,\n    placeholderChar: \"\\u2000\"\n  }));\n}\n\nvar DateInput = function DateInput(props) {\n  var _props$label;\n\n  var _useState = useState(new Date('2021-02-13')),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  function handleChange(value) {\n    try {\n      inputValues[props.id] = \"\" + value.toJSON().split('T')[0];\n    } catch (err) {\n      console.log(err);\n    }\n\n    setValue(value);\n  }\n\n  return React.createElement(MuiPickersUtilsProvider, {\n    utils: DateFnsUtils,\n    locale: ptBR\n  }, React.createElement(Grid, {\n    justify: \"space-around\",\n    style: {\n      flexGrow: 0,\n      marginTop: 18\n    }\n  }, React.createElement(KeyboardDatePicker, {\n    margin: \"normal\",\n    id: props.id,\n    label: (_props$label = props.label) != null ? _props$label : 'Data',\n    format: \"dd/MM/yyyy\",\n    value: value,\n    onChange: handleChange,\n    onBlur: handleChange,\n    KeyboardButtonProps: {\n      'aria-label': 'change date'\n    }\n  })));\n};\n\nvar SelectInput = function SelectInput(props) {\n  var _useState3 = useState(props.values[0]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      value = _useState4[0],\n      setValue = _useState4[1];\n\n  function handleChange(e) {\n    onChangeInputs(e);\n    setValue(e.target.value);\n  }\n\n  return React.createElement(FormControl, {\n    id: props.column,\n    style: _objectSpread(_objectSpread({}, props.style), {}, {\n      marginTop: '25px'\n    })\n  }, React.createElement(InputLabel, {\n    id: props.column\n  }, props.label), React.createElement(Select, {\n    labelId: props.id,\n    id: props.id,\n    name: props.name,\n    value: value,\n    onChange: handleChange,\n    onBlur: handleChange\n  }, props.values.map(function (val) {\n    return React.createElement(MenuItem, {\n      value: val\n    }, val);\n  })));\n};\n\nvar LDataGrid = function (_Component) {\n  _inherits(LDataGrid, _Component);\n\n  var _super = _createSuper(LDataGrid);\n\n  function LDataGrid() {\n    var _this;\n\n    _classCallCheck(this, LDataGrid);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      data: []\n    };\n    return _this;\n  }\n\n  _createClass(LDataGrid, [{\n    key: \"setPage\",\n    value: function setPage() {\n      var params,\n          data,\n          _args = arguments;\n      return _regeneratorRuntime.async(function setPage$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              params = _args.length > 0 && _args[0] !== undefined ? _args[0] : {\n                page: 1\n              };\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(this.props.pageRequest(params));\n\n            case 3:\n              data = _context.sent;\n              this.setState(_objectSpread(_objectSpread({}, this.state), {}, {\n                data: data\n              }));\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      return _regeneratorRuntime.async(function componentDidMount$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              this.setPage();\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this,\n          _this$state$data$data,\n          _this$state$data$tota;\n\n      var classes = {\n        m5: {\n          margin: 5,\n          marginTop: 25,\n          flexBasis: '30%'\n        },\n        root: {\n          maxWidth: 345,\n          marginBottom: 25\n        },\n        media: {\n          height: 140\n        }\n      };\n      return React.createElement(\"div\", null, React.createElement(Card, {\n        className: classes.root,\n        style: {\n          height: 200\n        }\n      }, React.createElement(CardContent, {\n        style: {\n          display: 'flex',\n          alignItems: 'center',\n          flexFlow: 'row wrap',\n          justifyContent: 'space-around'\n        }\n      }, this.props.filterInputs.map(function (input) {\n        if (input.type == \"text\") {\n          var _input$grow, _input$grow2;\n\n          if (input.mask === undefined) return React.createElement(TextField, {\n            style: _objectSpread(_objectSpread({}, classes.m5), {}, {\n              flexGrow: (_input$grow = input.grow) != null ? _input$grow : 0\n            }),\n            id: input.column,\n            label: input.label,\n            onChange: onChangeInputs,\n            onBlur: onChangeInputs\n          });else return React.createElement(FormControl, {\n            style: _objectSpread(_objectSpread({}, classes.m5), {}, {\n              flexGrow: (_input$grow2 = input.grow) != null ? _input$grow2 : 0\n            })\n          }, React.createElement(InputLabel, {\n            htmlFor: \"formatted-text-mask-input\"\n          }, input.label), React.createElement(Input, {\n            value: inputValues[input.column],\n            onChange: onChangeInputs,\n            onFocus: function onFocus(e) {\n              if (e.target.value.length == 0) {\n                e.target.setSelectionRange(0, e.target.value.length);\n              }\n            },\n            name: input.column,\n            id: input.column,\n            inputProps: {\n              mask: input.mask\n            },\n            inputComponent: TextMaskCustom\n          }));\n        } else if (input.type == \"date\") {\n          var _input$grow3;\n\n          return React.createElement(DateInput, {\n            id: input.column,\n            style: _objectSpread(_objectSpread({}, classes.m5), {}, {\n              flexGrow: (_input$grow3 = input.grow) != null ? _input$grow3 : 0\n            }),\n            onBlur: onChangeInputs\n          });\n        } else if (input.type == \"select\") {\n          var _input$grow4;\n\n          return React.createElement(SelectInput, {\n            id: input.column,\n            label: input.label,\n            name: input.column,\n            values: input.values,\n            style: _objectSpread(_objectSpread({}, classes.m5), {}, {\n              flexGrow: (_input$grow4 = input.grow) != null ? _input$grow4 : 0\n            }),\n            onBlur: onChangeInputs\n          });\n        }\n      }), React.createElement(Button, {\n        variant: \"outlined\",\n        color: \"primary\",\n        onClick: function onClick() {\n          _this2.setPage(inputValues);\n        }\n      }, \" Buscar \")), React.createElement(CardActionArea, null), React.createElement(CardActions, null)), React.createElement(\"div\", {\n        style: {\n          height: 300,\n          width: '100%'\n        }\n      }, React.createElement(DataGrid, {\n        rows: (_this$state$data$data = this.state.data.data) != null ? _this$state$data$data : [],\n        columns: this.props.columns,\n        disableClickEventBubbling: true,\n        localeText: DEFAULT_LOCALE_TEXT,\n        paginationMode: \"server\",\n        rowCount: (_this$state$data$tota = this.state.data.total) != null ? _this$state$data$tota : 0,\n        pageSize: 10,\n        rowsPerPageOptions: [10, 20, 50],\n        pagination: true,\n        onPageChange: function onPageChange(params) {\n          console.log(params);\n\n          _this2.setPage({\n            page: params.page,\n            pageSize: params.pageSize\n          });\n        }\n      })));\n    }\n  }]);\n\n  return LDataGrid;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(store) {\n  return {};\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    setProducts: setProducts,\n    setSnackbar: setSnackbar,\n    setDialog: setDialog,\n    setCart: setCart\n  }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LDataGrid);","map":{"version":3,"sources":["C:/Users/Maou/Documents/Projetos/CLIENTES/RNF/client/src/components/List/datagrid.js"],"names":["React","Component","Fragment","useState","useRef","connect","bindActionCreators","DataGrid","RowsProp","ColDef","setDialog","setProducts","setCart","setSnackbar","DEFAULT_LOCALE_TEXT","makeStyles","Card","CardActionArea","CardActions","CardContent","CardMedia","Button","Typography","TextField","Input","InputLabel","MenuItem","FormHelperText","FormControl","Select","ptBR","Grid","DateFnsUtils","MuiPickersUtilsProvider","KeyboardTimePicker","KeyboardDatePicker","PropTypes","MaskedInput","idNumbers","inputValues","onChangeInputs","e","value","target","includes","id","replace","length","name","toJSON","split","console","log","useStyles","theme","root","margin","spacing","TextMaskCustom","props","inputRef","other","ref","inputElement","mask","DateInput","Date","setValue","handleChange","err","flexGrow","marginTop","label","SelectInput","values","column","style","map","val","LDataGrid","state","data","params","page","pageRequest","setState","setPage","classes","m5","flexBasis","maxWidth","marginBottom","media","height","display","alignItems","flexFlow","justifyContent","filterInputs","input","type","undefined","grow","setSelectionRange","width","columns","total","pageSize","mapStateToProps","store","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component, Fragment, useState,  useRef } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { bindActionCreators } from 'redux';\r\n//\r\nimport { DataGrid, RowsProp, ColDef } from '@material-ui/data-grid';\r\n//\r\nimport { setDialog, setProducts } from '../../actions/productActions'\r\nimport { setCart } from '../../actions/cartAction'\r\nimport { setSnackbar } from '../../actions/appActions'\r\nimport { DEFAULT_LOCALE_TEXT } from '../../providers/langs/datagrid'\r\n//const classes = useStyles();\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n//\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Input from '@material-ui/core/Input';\r\n\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nimport ptBR from \"date-fns/locale/pt-BR\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardTimePicker,\r\n  KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\n\r\nimport PropTypes from 'prop-types';\r\nimport MaskedInput from 'react-text-mask';\r\n//\r\n\r\n//const [valus, setValues] = useState(new Date('2021-02-13'));\r\nconst idNumbers = [\r\n    'cpf', 'cnpj'\r\n]\r\nlet inputValues = {};\r\nfunction onChangeInputs(e) {\r\n    let value = e.target.value;\r\n    if(idNumbers.includes(e.target.id)){\r\n        value = value.replace(/[^\\d]+/g,'');\r\n    }\r\n    if(value.length == 0 || e.target.value == 'Todos'){\r\n        delete inputValues[e.target.id ?? e.target.name];\r\n    }else{\r\n        if(e.target.id == 'created_at'){\r\n            value =  `${value.toJSON().split('T')[0]}`\r\n        }\r\n        if(idNumbers.includes(e.target.id)){\r\n            value = value.replace(/[^\\d]+/g,'');\r\n        }\r\n        inputValues[e.target.id ?? e.target.name] = value\r\n        console.log(inputValues)\r\n    }\r\n}\r\n// MASKED INPUTS \r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      '& > *': {\r\n        margin: theme.spacing(1),\r\n      },\r\n    },\r\n  }));\r\n\r\n  function TextMaskCustom(props) {\r\n    const { inputRef, ...other } = props;\r\n  \r\n    return (\r\n      <MaskedInput\r\n        {...other}\r\n        ref={(ref) => {\r\n          inputRef(ref ? ref.inputElement : null);\r\n        }}\r\n        mask={props.mask}\r\n        placeholderChar={'\\u2000'}\r\n        \r\n      />\r\n    );\r\n  }\r\n\r\n\r\n//\r\nconst DateInput = (props) => {\r\n    const [value, setValue] = useState(new Date('2021-02-13'));\r\n    function handleChange(value) {\r\n        try{\r\n            inputValues[props.id] =  `${value.toJSON().split('T')[0]}`\r\n        }catch(err){\r\n            console.log(err);\r\n        }\r\n        setValue(value);\r\n    }\r\n    return (<MuiPickersUtilsProvider utils={DateFnsUtils} locale={ptBR}>\r\n                <Grid justify=\"space-around\" style={{flexGrow: 0, marginTop: 18}}>\r\n                <KeyboardDatePicker\r\n                    margin=\"normal\"\r\n                    id={props.id}\r\n                    label={props.label ?? 'Data'}\r\n                    format=\"dd/MM/yyyy\"\r\n                    value={value}\r\n                    onChange={handleChange}\r\n                    onBlur={handleChange}\r\n                    KeyboardButtonProps={{\r\n                        'aria-label': 'change date',\r\n                    }}\r\n                    />\r\n                </Grid>\r\n            </MuiPickersUtilsProvider>)\r\n}\r\n//\r\n\r\nconst SelectInput = (props) => {\r\n    const [value, setValue] = useState(props.values[0]);\r\n    function handleChange(e) {\r\n        onChangeInputs(e)\r\n        setValue(e.target.value);\r\n    }\r\n    return (\r\n        <FormControl id={props.column} style={{...props.style, marginTop: '25px'}}>\r\n                <InputLabel id={props.column}>{props.label}</InputLabel>\r\n                <Select\r\n                    labelId={props.id}\r\n                    id={props.id}\r\n                    name={props.name}\r\n                    value={value}\r\n                    onChange={handleChange}\r\n                    onBlur={handleChange}\r\n                >\r\n                    {\r\n                        props.values.map(val => {\r\n                            return <MenuItem  value={val}>{val}</MenuItem>\r\n                        })\r\n                    }\r\n                    \r\n                </Select>\r\n        </FormControl>)\r\n}\r\nclass LDataGrid extends Component {\r\n    state = {\r\n        data: [],\r\n    }\r\n    async setPage(params = { page: 1 }) {\r\n        const data = await this.props.pageRequest(params);\r\n        this.setState({ ...this.state, data })\r\n    }\r\n    async componentDidMount() {\r\n        this.setPage();\r\n    }\r\n\r\n    render() {\r\n        const classes = {\r\n            m5: {\r\n                margin: 5,\r\n                marginTop: 25,\r\n                flexBasis: '30%'\r\n                \r\n            },\r\n            root: {\r\n                maxWidth: 345,\r\n                marginBottom: 25\r\n            },\r\n            media: {\r\n                height: 140,\r\n            },\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <Card className={classes.root} style={{height: 200}}>\r\n                    <CardContent style={{\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n                        flexFlow: 'row wrap',\r\n                        justifyContent: 'space-around'\r\n                    }}>\r\n                        {\r\n                            this.props.filterInputs.map(input => {\r\n                                if(input.type == \"text\") {\r\n                                    if(input.mask === undefined)\r\n                                        return <TextField style={{...classes.m5, flexGrow: input.grow ?? 0}} id={input.column} label={input.label} onChange={onChangeInputs} onBlur={onChangeInputs} />\r\n                                    else\r\n                                        return (\r\n                                            <FormControl style={{...classes.m5, flexGrow: input.grow ?? 0}} >\r\n                                                <InputLabel htmlFor=\"formatted-text-mask-input\">{input.label}</InputLabel>\r\n                                                <Input\r\n                                                value={inputValues[input.column]}\r\n                                                onChange={onChangeInputs}\r\n                                                onFocus={(e) => {\r\n                                                    if(e.target.value.length == 0){\r\n                                                        //alert(e.target.value);\r\n                                                        e.target.setSelectionRange(0, e.target.value.length)\r\n                                                    }\r\n                                                }}\r\n                                                name={input.column}\r\n                                                id={input.column}\r\n                                                inputProps={{\r\n                                                    mask: input.mask\r\n                                                  }}\r\n                                                inputComponent={TextMaskCustom}\r\n                                                />\r\n                                            </FormControl>)\r\n\r\n                                }else if(input.type == \"date\") {\r\n                                    return <DateInput id={input.column} style={{...classes.m5, flexGrow: input.grow ?? 0}} onBlur={onChangeInputs} />\r\n                                }else if(input.type == \"select\"){\r\n                                    return ( <SelectInput id={input.column} label={input.label} name={input.column} values={input.values} style={{...classes.m5, flexGrow: input.grow ?? 0 }} onBlur={onChangeInputs} />)\r\n                                }\r\n                            })\r\n                        }\r\n                    <Button variant=\"outlined\" color=\"primary\" onClick={() => {this.setPage(inputValues)}}> Buscar </Button>\r\n                    </CardContent>\r\n                    <CardActionArea>\r\n                    </CardActionArea>\r\n                    <CardActions>\r\n\r\n                    </CardActions>\r\n                </Card>\r\n\r\n                <div style={{ height: 300, width: '100%' }}>\r\n                    <DataGrid rows={this.state.data.data ?? []} columns={this.props.columns}\r\n                        disableClickEventBubbling\r\n                        localeText={DEFAULT_LOCALE_TEXT}\r\n                        paginationMode=\"server\"\r\n                        rowCount={this.state.data.total ?? 0}\r\n                        pageSize={10} rowsPerPageOptions={[10, 20, 50]} pagination\r\n                        onPageChange={(params) => {\r\n                            console.log(params);\r\n                            this.setPage({ page: params.page, pageSize: params.pageSize });\r\n                        }}\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = store => ({\r\n\r\n});\r\nconst mapDispatchToProps = dispatch =>\r\n    bindActionCreators({ setProducts, setSnackbar, setDialog, setCart }, dispatch);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LDataGrid)\r\n"]},"metadata":{},"sourceType":"module"}